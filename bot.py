# bot.py
# QLottery / T√†i X·ªâu Bot - full implementation (auto 60s rounds)
# Features:
# - /start grants 80k once per account (requires 8 wager rounds to free-to-withdraw)
# - Admin approve groups; /batdau requests approval
# - Bets: /T<amount> for T√†i, /X<amount> for X·ªâu (in group when running & approved)
# - Auto cycle 60s; countdown 30s/10s/5s; lock chat at 5s; send GIF spin then 3 dice sequentially
# - Random rule: time (HHMM as number) + last4(round_epoch) parity -> odd = T√†i, even = X·ªâu
# - Promo code creation / redeem; promo requires N rounds wagering
# - Pot ("h≈©") mechanics (house share goes to pot; triple1/6 distributes pot proportionally)
# - Admin commands: /addmoney, /top10, /balances, /code, /nhancode, /KqTai /KqXiu /bettai /betxiu /tatbet
# - Private menu (Game, N·∫°p, R√∫t, S·ªë d∆∞)
# - Database SQLite (tx_bot_data.db by default)
# - Uses python-telegram-bot v20+ style async Application

import os
import sys
import sqlite3
import random
import traceback
import logging
import threading
import http.server
import socketserver
import asyncio
from datetime import datetime
from typing import List, Tuple, Optional, Dict, Any
import secrets

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup,
    KeyboardButton, ChatPermissions
)
from telegram.ext import (
    ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler,
    filters, Application
)

# -----------------------
# Keep port open (for Render)
# -----------------------
def keep_port_open():
    PORT = int(os.getenv("PORT", "10000"))
    handler = http.server.SimpleHTTPRequestHandler
    try:
        with socketserver.TCPServer(("", PORT), handler) as httpd:
            print(f"[keep_port_open] serving on port {PORT}")
            httpd.serve_forever()
    except Exception as e:
        print(f"[keep_port_open] {e}")

threading.Thread(target=keep_port_open, daemon=True).start()

# -----------------------
# Configuration
# -----------------------
BOT_TOKEN = os.getenv("BOT_TOKEN", "PUT_YOUR_BOT_TOKEN_HERE")  # set in Render env ideally
ADMIN_IDS = [7760459637, 6942793864]  # add admin ids here or via env var separated by comma
ROUND_SECONDS = int(os.getenv("ROUND_SECONDS", "60"))
MIN_BET = int(os.getenv("MIN_BET", "1000"))
START_BONUS = int(os.getenv("START_BONUS", "80000"))  # 80k as requested
START_BONUS_REQUIRED_ROUNDS = int(os.getenv("START_BONUS_REQUIRED_ROUNDS", "8"))
WIN_MULTIPLIER = float(os.getenv("WIN_MULTIPLIER", "1.97"))
HOUSE_RATE = float(os.getenv("HOUSE_RATE", "0.03"))
DB_FILE = os.getenv("DB_FILE", "tx_bot_data.db")
MAX_HISTORY = int(os.getenv("MAX_HISTORY", "20"))
# GIF for 3D dice spin (your provided link)
DICE_SPIN_GIF_URL = os.getenv("DICE_SPIN_GIF_URL", "https://www.emojiall.com/images/60/telegram/1f3b2.gif")

# logging
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# -----------------------
# Database helpers
# -----------------------
def get_db_connection():
    conn = sqlite3.connect(DB_FILE, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.executescript("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        balance REAL DEFAULT 0,
        total_deposited REAL DEFAULT 0,
        total_bet_volume REAL DEFAULT 0,
        current_streak INTEGER DEFAULT 0,
        best_streak INTEGER DEFAULT 0,
        created_at TEXT,
        start_bonus_given INTEGER DEFAULT 0,
        start_bonus_progress INTEGER DEFAULT 0
    );

    CREATE TABLE IF NOT EXISTS groups (
        chat_id INTEGER PRIMARY KEY,
        title TEXT,
        approved INTEGER DEFAULT 0,
        running INTEGER DEFAULT 0,
        bet_mode TEXT DEFAULT 'random',
        last_round INTEGER DEFAULT 0
    );

    CREATE TABLE IF NOT EXISTS bets (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        chat_id INTEGER,
        round_id TEXT,
        user_id INTEGER,
        side TEXT, -- 'tai' or 'xiu'
        amount REAL,
        timestamp TEXT
    );

    CREATE TABLE IF NOT EXISTS history (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        chat_id INTEGER,
        round_index INTEGER,
        round_id TEXT,
        result TEXT,
        dice TEXT,
        timestamp TEXT
    );

    CREATE TABLE IF NOT EXISTS pot (
        id INTEGER PRIMARY KEY CHECK (id=1),
        amount REAL DEFAULT 0
    );
    """)
    cur.execute("INSERT OR IGNORE INTO pot(id, amount) VALUES (1, 0)")
    # promo tables
    cur.executescript("""
    CREATE TABLE IF NOT EXISTS promo_codes (
        code TEXT PRIMARY KEY,
        amount REAL,
        wager_required INTEGER,
        used INTEGER DEFAULT 0,
        created_by INTEGER,
        created_at TEXT
    );
    CREATE TABLE IF NOT EXISTS promo_redemptions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        code TEXT,
        user_id INTEGER,
        amount REAL,
        wager_required INTEGER,
        wager_progress INTEGER DEFAULT 0,
        last_counted_round TEXT DEFAULT '',
        active INTEGER DEFAULT 1,
        redeemed_at TEXT
    );
    """)
    conn.commit()
    conn.close()

def db_execute(query: str, params: Tuple = ()):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute(query, params)
    conn.commit()
    lastrowid = cur.lastrowid
    conn.close()
    return lastrowid

def db_query(query: str, params: Tuple = ()):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute(query, params)
    rows = cur.fetchall()
    conn.close()
    return rows

# -----------------------
# User helpers
# -----------------------
def now_iso():
    return datetime.utcnow().isoformat()

def ensure_user(user_id: int, username: str = "", first_name: str = ""):
    rows = db_query("SELECT user_id FROM users WHERE user_id=?", (user_id,))
    if not rows:
        db_execute(
            "INSERT INTO users(user_id, username, first_name, balance, total_deposited, total_bet_volume, current_streak, best_streak, created_at, start_bonus_given, start_bonus_progress) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            (user_id, username or "", first_name or "", 0.0, 0.0, 0.0, 0, 0, now_iso(), 0, 0)
        )

def get_user(user_id: int) -> Optional[Dict[str, Any]]:
    rows = db_query("SELECT * FROM users WHERE user_id=?", (user_id,))
    return dict(rows[0]) if rows else None

def add_balance(user_id: int, amount: float):
    ensure_user(user_id, "", "")
    u = get_user(user_id)
    new_bal = (u["balance"] or 0.0) + amount
    db_execute("UPDATE users SET balance=? WHERE user_id=?", (new_bal, user_id))
    return new_bal

def set_balance(user_id: int, amount: float):
    ensure_user(user_id, "", "")
    db_execute("UPDATE users SET balance=? WHERE user_id=?", (amount, user_id))

def add_to_pot(amount: float):
    rows = db_query("SELECT amount FROM pot WHERE id=1")
    current = rows[0]["amount"] if rows else 0.0
    new = current + amount
    db_execute("UPDATE pot SET amount=? WHERE id=1", (new,))

def get_pot_amount() -> float:
    rows = db_query("SELECT amount FROM pot WHERE id=1")
    return rows[0]["amount"] if rows else 0.0

def reset_pot():
    db_execute("UPDATE pot SET amount=? WHERE id=1", (0.0,))

# -----------------------
# Dice logic
# -----------------------
DICE_CHARS = ["\u2680", "\u2681", "\u2682", "\u2683", "\u2684", "\u2685"]
WHITE = "‚ö™"  # X·ªâu
BLACK = "‚ö´"  # T√†i

def roll_one_die() -> int:
    return random.randint(1, 6)

def roll_three_dice_random() -> Tuple[List[int], int, Optional[str]]:
    a = roll_one_die()
    b = roll_one_die()
    c = roll_one_die()
    dice = [a, b, c]
    total = sum(dice)
    special = None
    if dice.count(1) == 3:
        special = "triple1"
    elif dice.count(6) == 3:
        special = "triple6"
    return dice, total, special

def result_from_total(total: int) -> str:
    if 11 <= total <= 17:
        return "tai"
    elif 4 <= total <= 10:
        return "xiu"
    else:
        return "invalid"

def decide_result_by_time_rule(round_epoch: int) -> str:
    now = datetime.utcnow()
    hhmm = now.hour * 100 + now.minute  # e.g., 7:54 -> 754
    last4 = int(str(round_epoch)[-4:]) if round_epoch is not None else 0
    s = hhmm + last4
    return "tai" if (s % 2 == 1) else "xiu"

# -----------------------
# Chat lock/unlock and countdown
# -----------------------
async def lock_group_chat(bot, chat_id: int):
    try:
        perms = ChatPermissions(can_send_messages=False)
        await bot.set_chat_permissions(chat_id=chat_id, permissions=perms)
    except Exception:
        pass

async def unlock_group_chat(bot, chat_id: int):
    try:
        perms = ChatPermissions(
            can_send_messages=True,
            can_send_media_messages=True,
            can_send_polls=True,
            can_send_other_messages=True,
            can_add_web_page_previews=True
        )
        await bot.set_chat_permissions(chat_id=chat_id, permissions=perms)
    except Exception:
        pass

async def send_countdown(bot, chat_id: int, seconds: int):
    try:
        if seconds == 30:
            await bot.send_message(chat_id=chat_id, text="‚è∞ C√≤n 30 gi√¢y tr∆∞·ªõc khi quay k·∫øt qu·∫£ ‚Äî nhanh tay c∆∞·ª£c!")
        elif seconds == 10:
            await bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è C√≤n 10 gi√¢y! S·∫Øp kh√≥a c∆∞·ª£c.")
        elif seconds == 5:
            await bot.send_message(chat_id=chat_id, text="üîí C√≤n 5 gi√¢y ‚Äî Chat b·ªã kh√≥a ƒë·ªÉ ch·ªët c∆∞·ª£c.")
            await lock_group_chat(bot, chat_id)
    except Exception:
        pass

# -----------------------
# UI / menu in private only
# -----------------------
MAIN_MENU = ReplyKeyboardMarkup(
    [
        [KeyboardButton("Game"), KeyboardButton("N·∫°p ti·ªÅn")],
        [KeyboardButton("R√∫t ti·ªÅn"), KeyboardButton("S·ªë d∆∞")]
    ],
    resize_keyboard=True
)

async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    ensure_user(user.id, user.username or "", user.first_name or "")
    u = get_user(user.id)
    greeted = False
    if u and u.get("start_bonus_given", 0) == 0:
        add_balance(user.id, START_BONUS)
        db_execute("UPDATE users SET total_deposited=COALESCE(total_deposited,0)+?, start_bonus_given=1, start_bonus_progress=0 WHERE user_id=?", (START_BONUS, user.id))
        greeted = True

    text = f"Xin ch√†o {user.first_name or 'b·∫°n'}! üëã\nCh√†o m·ª´ng ƒë·∫øn ph√≤ng T√†i X·ªâu t·ª± ƒë·ªông.\n"
    if greeted:
        text += f"B·∫°n ƒë√£ nh·∫≠n {START_BONUS:,}‚Ç´ mi·ªÖn ph√≠ (m·ªôt l·∫ßn). ƒê·ªÉ r√∫t, h√£y c∆∞·ª£c √≠t nh·∫•t {START_BONUS_REQUIRED_ROUNDS} v√≤ng. Li√™n h·ªá admin ƒë·ªÉ ƒë·ªïi quy ch·∫ø.\n\n"
    text += "Menu:\n- Game\n- N·∫°p ti·ªÅn\n- R√∫t ti·ªÅn\n- S·ªë d∆∞\n\n(L∆∞u √Ω: Menu ch·ªâ hi·ªán trong tin nh·∫Øn ri√™ng v·ªõi bot.)"
    await update.message.reply_text(text, reply_markup=MAIN_MENU)

async def menu_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip().lower()
    if txt == "game":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("Room T√†i X·ªâu", callback_data="game_tx")],
            [InlineKeyboardButton("Ch·∫µn l·∫ª (update)", callback_data="game_cl")],
            [InlineKeyboardButton("Sicbo (update)", callback_data="game_sb")]
        ])
        await update.message.reply_text("Ch·ªçn game:", reply_markup=kb)
    elif txt in ("n·∫°p ti·ªÅn", "nap tien", "n·∫°p"):
        await update.message.reply_text("Li√™n h·ªá ƒë·ªÉ n·∫°p: @HOANGDUNGG789")
    elif txt in ("r√∫t ti·ªÅn", "rut tien", "ruttien"):
        await ruttien_help(update, context)
    elif txt in ("s·ªë d∆∞", "so du"):
        u = get_user(update.effective_user.id)
        bal = int(u["balance"]) if u else 0
        await update.message.reply_text(f"S·ªë d∆∞ hi·ªán t·∫°i: {bal:,}‚Ç´")

async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if q.data == "game_tx":
        await q.message.reply_text("Room T√†i X·ªâu: ƒê·∫∑t c∆∞·ª£c trong nh√≥m b·∫±ng /T<amount> cho T√†i ho·∫∑c /X<amount> cho X·ªâu. Link: @VET789cc")
    elif q.data in ("game_cl","game_sb"):
        await q.message.reply_text("S·∫Ω c·∫≠p nh·∫≠t sau.")

# -----------------------
# Withdraw handlers
# -----------------------
async def withdraw_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    parts = (query.data or "").split("|")
    if len(parts) < 5:
        await query.edit_message_text("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.")
        return

    action = parts[0]
    try:
        user_id = int(parts[1])
        amount = int(parts[2])
        bank = parts[3]
        account = parts[4]
    except:
        await query.edit_message_text("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.")
        return

    # ‚úÖ Ch·ªâ admin m·ªõi c√≥ quy·ªÅn duy·ªát
    if query.from_user.id not in ADMIN_IDS:
        await query.edit_message_text("Ch·ªâ admin m·ªõi thao t√°c.")
        return

    # ‚úÖ N·∫øu admin duy·ªát r√∫t ti·ªÅn
    if action == "withdraw_ok":
        u = get_user(user_id)
        if not u:
            await query.edit_message_text("User kh√¥ng t·ªìn t·∫°i.")
            return

        # üìå 1Ô∏è‚É£ Ki·ªÉm tra s·ªë d∆∞
        if u["balance"] < amount:
            await query.edit_message_text("User kh√¥ng ƒë·ªß ti·ªÅn.")
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"‚ùå Y√™u c·∫ßu r√∫t {amount:,}‚Ç´ b·ªã t·ª´ ch·ªëi: s·ªë d∆∞ kh√¥ng ƒë·ªß."
                )
            except:
                pass
            return

        # üìå 2Ô∏è‚É£ Gi·ªõi h·∫°n r√∫t t·ªëi ƒëa 1.000.000ƒë/ng√†y
        today = datetime.utcnow().date()
        total_today = db_query_one(
            "SELECT COALESCE(SUM(amount), 0) FROM withdrawals WHERE user_id=? AND DATE(created_at)=?",
            (user_id, today.isoformat())
        )[0]

        if total_today + amount > 1_000_000:
            await query.edit_message_text(f"Y√™u c·∫ßu r√∫t {amount:,}‚Ç´ b·ªã t·ª´ ch·ªëi (v∆∞·ª£t gi·ªõi h·∫°n 1.000.000ƒë/ng√†y).")
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"‚ùå B·∫°n ƒë√£ v∆∞·ª£t gi·ªõi h·∫°n r√∫t t·ªëi ƒëa 1.000.000‚Ç´ trong ng√†y. H√£y th·ª≠ l·∫°i v√†o ng√†y mai."
                )
            except:
                pass
            return

        # üìå 3Ô∏è‚É£ C·∫≠p nh·∫≠t s·ªë d∆∞
        new_bal = u["balance"] - amount
        db_execute("UPDATE users SET balance=? WHERE user_id=?", (new_bal, user_id))

        # üìå 4Ô∏è‚É£ Ghi l·ªãch s·ª≠ r√∫t
        db_execute(
            "INSERT INTO withdrawals (user_id, amount, created_at) VALUES (?, ?, ?)",
            (user_id, amount, datetime.utcnow().isoformat())
        )

        # üìå 5Ô∏è‚É£ G·ª≠i th√¥ng b√°o
        await query.edit_message_text(f"‚úÖ ƒê√£ x√°c nh·∫≠n r√∫t {amount:,}‚Ç´ cho user {user_id}.")
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚úÖ Y√™u c·∫ßu r√∫t {amount:,}‚Ç´ ƒë√£ ƒë∆∞·ª£c duy·ªát b·ªüi admin.\nNg√¢n h√†ng: {bank}\nS·ªë TK: {account}"
            )
        except:
            pass

    # ‚ùå N·∫øu admin t·ª´ ch·ªëi
    else:
        await query.edit_message_text(
            f"Y√™u c·∫ßu r√∫t {amount:,}‚Ç´ ƒë√£ b·ªã t·ª´ ch·ªëi b·ªüi admin {query.from_user.id}."
        )
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚ùå Y√™u c·∫ßu r√∫t {amount:,}‚Ç´ ƒë√£ b·ªã t·ª´ ch·ªëi."
            )
        except:
            pass
        
# -----------------------------
# ‚úÖ BET HANDLER (T/X + /T/X)
# -----------------------------
async def bet_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or not msg.text:
        return

    text = msg.text.strip()
    # ‚úÖ Ch·∫•p nh·∫≠n c·∫£ /T1000, /X1000 v√† T1000, X1000
    if text.startswith("/"):
        cmd = text[1:]
    else:
        cmd = text

    if len(cmd) < 2:
        return

    prefix = cmd[0].lower()
    if prefix not in ("t", "x"):
        return

    side = "tai" if prefix == "t" else "xiu"

    # ‚úÖ Parse ti·ªÅn c∆∞·ª£c
    try:
        amount = int(cmd[1:])
    except:
        await msg.reply_text("‚ùå C√∫ ph√°p ƒë·∫∑t c∆∞·ª£c sai. V√≠ d·ª•: /T1000 ho·∫∑c X5000")
        return

    if amount < MIN_BET:
        await msg.reply_text(f"‚ö†Ô∏è ƒê·∫∑t c∆∞·ª£c t·ªëi thi·ªÉu {MIN_BET:,}‚Ç´")
        return

    user = update.effective_user
    chat = update.effective_chat

    # ‚úÖ Ch·ªâ cho ph√©p c∆∞·ª£c trong group
    if chat.type not in ("group", "supergroup"):
        await msg.reply_text("L·ªánh c∆∞·ª£c ch·ªâ d√πng trong nh√≥m.")
        return

    # ‚úÖ Ki·ªÉm tra nh√≥m ƒë√£ duy·ªát & ƒëang ch·∫°y
    g = db_query("SELECT approved, running FROM groups WHERE chat_id=?", (chat.id,))
    if not g or g[0]["approved"] != 1 or g[0]["running"] != 1:
        await msg.reply_text("Nh√≥m n√†y ch∆∞a ƒë∆∞·ª£c admin duy·ªát ho·∫∑c ch∆∞a b·∫≠t /batdau.")
        return

    ensure_user(user.id, user.username or "", user.first_name or "")
    u = get_user(user.id)
    if not u or (u["balance"] or 0.0) < amount:
        await msg.reply_text("‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß.")
        return

    # ‚úÖ Tr·ª´ ti·ªÅn ngay & c·ªông t·ªïng c∆∞·ª£c
    new_balance = (u["balance"] or 0.0) - amount
    new_total_bet = (u["total_bet_volume"] or 0.0) + amount
    db_execute(
        "UPDATE users SET balance=?, total_bet_volume=? WHERE user_id=?",
        (new_balance, new_total_bet, user.id)
    )

    # ‚úÖ L∆∞u c∆∞·ª£c v√†o DB
    now_ts = int(datetime.utcnow().timestamp())
    round_epoch = now_ts // ROUND_SECONDS
    round_id = f"{chat.id}_{round_epoch}"
    db_execute(
        "INSERT INTO bets(chat_id, round_id, user_id, side, amount, timestamp) VALUES (?, ?, ?, ?, ?, ?)",
        (chat.id, round_id, user.id, side, amount, now_iso())
    )

    # ‚úÖ Update bonus start progress n·∫øu c√≥
    try:
        rows = db_query("SELECT start_bonus_given, start_bonus_progress FROM users WHERE user_id=?", (user.id,))
        if rows and rows[0]["start_bonus_given"] == 1:
            new_prog = (rows[0]["start_bonus_progress"] or 0) + 1
            db_execute("UPDATE users SET start_bonus_progress=? WHERE user_id=?", (new_prog, user.id))
    except Exception:
        logger.exception("start bonus progress update failed")

    # ‚úÖ Update promo wager progress n·∫øu c√≥
    try:
        await update_promo_wager_progress(context, user.id, round_id)
    except Exception:
        logger.exception("promo progress failed")

    # ‚úÖ Ph·∫£n h·ªìi kh√¥ng k√®m s·ªë d∆∞
    await msg.reply_text(f"‚úÖ ƒê√£ ƒë·∫∑t {side.upper()} {amount:,}‚Ç´ cho phi√™n hi·ªán t·∫°i.")
# -----------------------
# Admin handlers
# -----------------------
async def addmoney_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("Ch·ªâ admin m·ªõi d√πng l·ªánh n√†y.")
        return
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("C√∫ ph√°p: /addmoney <user_id> <amount>")
        return
    try:
        uid = int(args[0]); amt = float(args[1])
    except:
        await update.message.reply_text("Tham s·ªë kh√¥ng h·ª£p l·ªá.")
        return
    ensure_user(uid, "", "")
    new_bal = add_balance(uid, amt)
    db_execute("UPDATE users SET total_deposited=COALESCE(total_deposited,0)+? WHERE user_id=?", (amt, uid))
    await update.message.reply_text(f"ƒê√£ c·ªông {int(amt):,}‚Ç´ cho user {uid}. S·ªë d∆∞ hi·ªán: {int(new_bal):,}‚Ç´")
    try:
        await context.bot.send_message(chat_id=uid, text=f"B·∫°n v·ª´a ƒë∆∞·ª£c admin c·ªông {int(amt):,}‚Ç´. S·ªë d∆∞: {int(new_bal):,}‚Ç´")
    except:
        pass

async def top10_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("Ch·ªâ admin.")
        return
    rows = db_query("SELECT user_id, total_deposited FROM users ORDER BY total_deposited DESC LIMIT 10")
    text = "Top 10 n·∫°p nhi·ªÅu nh·∫•t:\n"
    for i, r in enumerate(rows, start=1):
        text += f"{i}. {r['user_id']} ‚Äî {int(r['total_deposited'] or 0):,}‚Ç´\n"
    await update.message.reply_text(text)

async def balances_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("Ch·ªâ admin.")
        return
    rows = db_query("SELECT user_id, balance FROM users ORDER BY balance DESC LIMIT 50")
    text = "Top balances:\n"
    for r in rows:
        text += f"- {r['user_id']}: {int(r['balance'] or 0):,}‚Ç´\n"
    await update.message.reply_text(text)

# admin force commands
async def admin_force_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("Ch·ªâ admin.")
        return
    text = update.message.text.strip()
    cmd = text.split()[0].lower()
    args = context.args
    if not args:
        await update.message.reply_text("C√∫ ph√°p: /KqTai <chat_id> ho·∫∑c /bettai <chat_id>")
        return
    try:
        chat_id = int(args[0])
    except:
        await update.message.reply_text("chat_id kh√¥ng h·ª£p l·ªá.")
        return
    if cmd == "/kqtai":
        db_execute("UPDATE groups SET bet_mode=? WHERE chat_id=?", ("force_tai", chat_id))
        await update.message.reply_text(f"ƒê√£ ƒë·∫∑t force T√ÄI cho nh√≥m {chat_id}.")
    elif cmd == "/kqxiu":
        db_execute("UPDATE groups SET bet_mode=? WHERE chat_id=?", ("force_xiu", chat_id))
        await update.message.reply_text(f"ƒê√£ ƒë·∫∑t force X·ªàU cho nh√≥m {chat_id}.")
    elif cmd == "/bettai":
        db_execute("UPDATE groups SET bet_mode=? WHERE chat_id=?", ("bettai", chat_id))
        await update.message.reply_text(f"ƒê√£ b·∫≠t c·∫ßu b·ªát T√ÄI cho nh√≥m {chat_id}.")
    elif cmd == "/betxiu":
        db_execute("UPDATE groups SET bet_mode=? WHERE chat_id=?", ("betxiu", chat_id))
        await update.message.reply_text(f"ƒê√£ b·∫≠t c·∫ßu b·ªát X·ªàU cho nh√≥m {chat_id}.")
    elif cmd == "/tatbet":
        db_execute("UPDATE groups SET bet_mode=? WHERE chat_id=?", ("random", chat_id))
        await update.message.reply_text(f"ƒê√£ tr·∫£ v·ªÅ ch·∫ø ƒë·ªô random cho nh√≥m {chat_id}.")
    else:
        await update.message.reply_text("L·ªánh admin kh√¥ng h·ª£p l·ªá.")

# -----------------------
# Promo code handlers
# -----------------------
def ensure_promo_tables():
    # already created in init_db safely (idempotent)
    pass

async def admin_create_code_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("Ch·ªâ admin.")
        return
    if not context.args or len(context.args) < 2:
        await update.message.reply_text("C√∫ ph√°p: /code <amount> <wager_rounds>")
        return
    try:
        amount = int(float(context.args[0])); wager_required = int(context.args[1])
    except:
        await update.message.reply_text("Tham s·ªë kh√¥ng h·ª£p l·ªá.")
        return
    code = secrets.token_hex(4).upper()
    created_at = now_iso()
    db_execute("INSERT INTO promo_codes(code, amount, wager_required, used, created_by, created_at) VALUES (?, ?, ?, ?, ?, ?)",
               (code, amount, wager_required, 0, update.effective_user.id, created_at))
    await update.message.reply_text(f"ƒê√£ t·∫°o code `{code}` ‚Äî {int(amount):,}‚Ç´ ‚Äî ph·∫£i c∆∞·ª£c {wager_required} v√≤ng. Ng∆∞·ªùi d√πng nh·∫≠p /nhancode {code}", parse_mode="Markdown")

async def redeem_code_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("C√∫ ph√°p: /nhancode <CODE>")
        return
    code = context.args[0].strip().upper()
    rows = db_query("SELECT code, amount, wager_required, used FROM promo_codes WHERE code=?", (code,))
    if not rows:
        await update.message.reply_text("Code kh√¥ng t·ªìn t·∫°i.")
        return
    row = rows[0]
    if row["used"] == 1:
        await update.message.reply_text("Code ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.")
        return
    # mark used
    db_execute("UPDATE promo_codes SET used=1 WHERE code=?", (code,))
    amount = row["amount"]; wager = int(row["wager_required"])
    ensure_user(update.effective_user.id, update.effective_user.username or "", update.effective_user.first_name or "")
    add_balance(update.effective_user.id, amount)
    db_execute("INSERT INTO promo_redemptions(code, user_id, amount, wager_required, wager_progress, last_counted_round, active, redeemed_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
               (code, update.effective_user.id, amount, wager, 0, "", 1, now_iso()))
    await update.message.reply_text(f"B·∫°n nh·∫≠n {int(amount):,}‚Ç´ t·ª´ code {code}. Ph·∫£i c∆∞·ª£c {wager} v√≤ng ƒë·ªÉ h·ª£p l·ªá.")

async def update_promo_wager_progress(context: ContextTypes.DEFAULT_TYPE, user_id: int, round_id: str):
    try:
        rows = db_query("SELECT id, code, wager_required, wager_progress, last_counted_round, active, amount FROM promo_redemptions WHERE user_id=? AND active=1", (user_id,))
        if not rows:
            return
        for r in rows:
            rid = r["id"]; last = r["last_counted_round"] or ""
            if str(last) == str(round_id):
                continue
            new_progress = (r["wager_progress"] or 0) + 1
            active = 1
            if new_progress >= (r["wager_required"] or 0):
                active = 0
            db_execute("UPDATE promo_redemptions SET wager_progress=?, last_counted_round=?, active=? WHERE id=?", (new_progress, str(round_id), active, rid))
            if active == 0:
                try:
                    await context.bot.send_message(chat_id=user_id, text=f"‚úÖ B·∫°n ƒë√£ ho√†n th√†nh y√™u c·∫ßu c∆∞·ª£c cho code {r['code']}! Ti·ªÅn {int(r['amount']):,}‚Ç´ hi·ªán ƒë√£ h·ª£p l·ªá.")
                except Exception:
                    pass
    except Exception:
        logger.exception("update_promo_wager_progress failed")

# -----------------------
# Group approval command /batdau & approve callback
# -----------------------
async def batdau_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if chat.type not in ("group","supergroup"):
        await update.message.reply_text("/batdau ch·ªâ d√πng trong nh√≥m.")
        return
    title = chat.title or ""
    rows = db_query("SELECT chat_id FROM groups WHERE chat_id=?", (chat.id,))
    if not rows:
        db_execute("INSERT INTO groups(chat_id, title, approved, running, bet_mode, last_round) VALUES (?, ?, 0, 0, 'random', ?)", (chat.id, title, 0))
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("Duy·ªát", callback_data=f"approve|{chat.id}"),
         InlineKeyboardButton("T·ª´ ch·ªëi", callback_data=f"deny|{chat.id}")]
    ])
    text = f"Y√™u c·∫ßu b·∫≠t bot cho nh√≥m:\n{title}\nchat_id: {chat.id}\nNg∆∞·ªùi y√™u c·∫ßu: {update.effective_user.id}"
    for aid in ADMIN_IDS:
        try:
            await context.bot.send_message(chat_id=aid, text=text, reply_markup=kb)
        except Exception:
            logger.exception("Cannot notify admin for group approval")
    await update.message.reply_text("ƒê√£ g·ª≠i y√™u c·∫ßu t·ªõi admin ƒë·ªÉ duy·ªát.")

async def approve_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    parts = (query.data or "").split("|")
    if len(parts) != 2:
        await query.edit_message_text("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.")
        return
    action, chat_id_s = parts
    try:
        chat_id = int(chat_id_s)
    except:
        await query.edit_message_text("chat_id kh√¥ng h·ª£p l·ªá.")
        return
    if query.from_user.id not in ADMIN_IDS:
        await query.edit_message_text("Ch·ªâ admin m·ªõi thao t√°c.")
        return
    if action == "approve":
        db_execute("UPDATE groups SET approved=1, running=1 WHERE chat_id=?", (chat_id,))
        await query.edit_message_text(f"ƒê√£ duy·ªát v√† b·∫≠t ch·∫°y cho nh√≥m {chat_id}.")
        try:
            await context.bot.send_message(chat_id=chat_id, text="Bot ƒë√£ ƒë∆∞·ª£c admin duy·ªát ‚Äî b·∫Øt ƒë·∫ßu ch·∫°y phi√™n m·ªói 60s. G√µ /batdau ƒë·ªÉ y√™u c·∫ßu ch·∫°y l·∫°i.")
        except:
            pass
    else:
        db_execute("UPDATE groups SET approved=0, running=0 WHERE chat_id=?", (chat_id,))
        await query.edit_message_text(f"ƒê√£ t·ª´ ch·ªëi cho nh√≥m {chat_id}.")

# -----------------------
# Rounds engine: orchestration
# -----------------------
def get_active_groups() -> List[Dict[str, Any]]:
    rows = db_query("SELECT chat_id, bet_mode, last_round FROM groups WHERE approved=1 AND running=1")
    return [dict(r) for r in rows]

def format_history_line(chat_id: int) -> str:
    rows = db_query("SELECT result FROM history WHERE chat_id=? ORDER BY id DESC LIMIT ?", (chat_id, MAX_HISTORY))
    results = [r["result"] for r in reversed(rows)]
    mapped = []
    for r in results:
        mapped.append(BLACK if r == "tai" else WHITE)
    return " ".join(mapped)

async def run_round_for_group(app: Application, chat_id: int):
    """
    X·ª≠ l√Ω 1 phi√™n cho nh√≥m:
    - x√°c ƒë·ªãnh round_id
    - gom c∆∞·ª£c
    - (n·∫øu c√≥) √°p d·ª•ng ch·∫ø ƒë·ªô √©p k·∫øt qu·∫£ / c·∫ßu b·ªát
    - hi·ªÉn th·ªã GIF quay (n·∫øu c√≥) v√† g·ª≠i t·ª´ng x√∫c x·∫Øc c√°ch ƒë·ªÅu
    - t√≠nh k·∫øt qu·∫£, l∆∞u history
    - tr·∫£ th∆∞·ªüng cho ng∆∞·ªùi th·∫Øng, ƒë∆∞a ti·ªÅn thua + house_share v√†o pot
    - x·ª≠ l√Ω special triple -> chia pot
    - g·ª≠i th√¥ng b√°o k·∫øt qu·∫£ t·ªõi group v√† summary cho admin
    """
    try:
        # --- chu·∫©n b·ªã phi√™n ---
        now_ts = int(datetime.utcnow().timestamp())
        round_epoch = now_ts // ROUND_SECONDS
        round_index = round_epoch
        round_id = f"{chat_id}_{round_epoch}"

        # L·∫•y c∆∞·ª£c c·ªßa phi√™n (n·∫øu c√≥)
        bets_rows = db_query("SELECT user_id, side, amount FROM bets WHERE chat_id=? AND round_id=?", (chat_id, round_id))
        bets = [dict(r) for r in bets_rows] if bets_rows else []

        # L·∫•y ch·∫ø ƒë·ªô nh√≥m
        grows = db_query("SELECT bet_mode FROM groups WHERE chat_id=?", (chat_id,))
        bet_mode = grows[0]["bet_mode"] if grows else "random"

        # Quy·∫øt ƒë·ªãnh forced/bettai/betxiu
        forced_value = None
        if bet_mode == "force_tai":
            forced_value = "tai"
            # revert one-shot
            db_execute("UPDATE groups SET bet_mode='random' WHERE chat_id=?", (chat_id,))
        elif bet_mode == "force_xiu":
            forced_value = "xiu"
            db_execute("UPDATE groups SET bet_mode='random' WHERE chat_id=?", (chat_id,))
        elif bet_mode == "bettai":
            forced_value = "tai"
        elif bet_mode == "betxiu":
            forced_value = "xiu"

        # Th√¥ng b√°o b·∫Øt ƒë·∫ßu tung x√∫c x·∫Øc
        try:
            await app.bot.send_message(chat_id=chat_id, text=f"üé≤ Phi√™n {round_index} ‚Äî ƒêang tung x√∫c x·∫Øc...")
        except Exception:
            # kh√¥ng quan tr·ªçng n·∫øu g·ª≠i th·∫•t b·∫°i
            pass

        # --- Quay x√∫c x·∫Øc ---
        dice = []
        special = None
        total = 0

        # N·∫øu c√≥ GIF spin, g·ª≠i GIF 3D quay (n·∫øu ƒë·ªãnh nghƒ©a DICE_SPIN_GIF_URL)
        if 'DICE_SPIN_GIF_URL' in globals() and DICE_SPIN_GIF_URL:
            try:
                await app.bot.send_animation(chat_id=chat_id, animation=DICE_SPIN_GIF_URL, caption="üîÑ Quay x√∫c x·∫Øc...")
                # ch·ªù GIF quay (ƒëi·ªÅu ch·ªânh th·ªùi gian n·∫øu c·∫ßn)
                await asyncio.sleep(1.2)
            except Exception:
                pass

        if forced_value:
            # t√¨m 1 b·ªô x√∫c x·∫Øc ph√π h·ª£p v·ªõi forced_value (gi·ªõi h·∫°n s·ªë l·∫ßn th·ª≠ ƒë·ªÉ tr√°nh loop)
            attempts = 0
            dice, total, special = roll_three_dice_random()
            while result_from_total(total) != forced_value and attempts < 200:
                dice, total, special = roll_three_dice_random()
                attempts += 1
            # g·ª≠i t·ª´ng vi√™n ra cho ƒë·∫πp
            for val in dice:
                try:
                    await app.bot.send_message(chat_id=chat_id, text=f"{DICE_CHARS[val-1]}")
                except Exception:
                    pass
                await asyncio.sleep(1.0)
        else:
            # b√¨nh th∆∞·ªùng: tung t·ª´ng vi√™n v√† g·ª≠i t·ª´ng vi√™n 1s-1.2s
            a = roll_one_die()
            dice.append(a)
            try:
                await app.bot.send_message(chat_id=chat_id, text=f"{DICE_CHARS[a-1]}")
            except Exception:
                pass
            await asyncio.sleep(1.2)

            b = roll_one_die()
            dice.append(b)
            try:
                await app.bot.send_message(chat_id=chat_id, text=f"{DICE_CHARS[b-1]}")
            except Exception:
                pass
            await asyncio.sleep(1.2)

            c = roll_one_die()
            dice.append(c)
            try:
                await app.bot.send_message(chat_id=chat_id, text=f"{DICE_CHARS[c-1]}")
            except Exception:
                pass

            total = sum(dice)
            if dice.count(1) == 3:
                special = "triple1"
            elif dice.count(6) == 3:
                special = "triple6"

        # ƒë·∫£m b·∫£o total ƒë∆∞·ª£c set cho tr∆∞·ªùng h·ª£p forced
        if total == 0:
            total = sum(dice)

        # K·∫øt qu·∫£ cu·ªëi c√πng
        result = result_from_total(total)

        # --- L∆∞u l·ªãch s·ª≠ ---
        dice_str = ",".join(map(str, dice))
        try:
            db_execute(
                "INSERT INTO history(chat_id, round_index, round_id, result, dice, timestamp) VALUES (?, ?, ?, ?, ?, ?)",
                (chat_id, round_index, round_id, result, dice_str, now_iso())
            )
        except Exception:
            logger.exception("Failed to insert history")

        # --- T√≠nh winners / losers ---
        winners = []
        losers = []
        total_winner_bets = 0.0
        total_loser_bets = 0.0

        for b in bets:
            side = b.get("side")
            amt = float(b.get("amount") or 0.0)
            if side == result:
                winners.append((b["user_id"], amt))
                total_winner_bets += amt
            else:
                losers.append((b["user_id"], amt))
                total_loser_bets += amt

        # --- Chuy·ªÉn ti·ªÅn thua v√†o pot (atomic) ---
        try:
            if total_loser_bets > 0:
                db_execute("UPDATE pot SET amount = amount + ? WHERE id = 1", (total_loser_bets,))
        except Exception:
            logger.exception("Failed to add losers to pot")

        # --- Tr·∫£ th∆∞·ªüng cho winners ---
        winners_paid = []
        for uid, amt in winners:
            try:
                # t√≠nh house share v√† payout
                house_share = int(round(amt * HOUSE_RATE))
                payout = int(round(amt * WIN_MULTIPLIER))

                ensure_user(uid, "", "")

                # c·ªông house share v√†o pot
                if house_share > 0:
                    try:
                        db_execute("UPDATE pot SET amount = amount + ? WHERE id = 1", (house_share,))
                    except Exception:
                        logger.exception("Failed to add house share to pot")

                # c·∫≠p nh·∫≠t balance v√† streak b·∫±ng 1 c√¢u l·ªánh UPDATE (n·∫øu DB SQLite h·ªó tr·ª£ COALESCE)
                try:
                    db_execute(
                        """
                        UPDATE users SET
                            balance = COALESCE(balance, 0) + ?,
                            current_streak = COALESCE(current_streak, 0) + 1,
                            best_streak = CASE
                                WHEN COALESCE(current_streak, 0) + 1 > COALESCE(best_streak, 0)
                                THEN COALESCE(current_streak, 0) + 1
                                ELSE COALESCE(best_streak, 0)
                            END
                        WHERE user_id = ?
                        """,
                        (payout, uid)
                    )
                except Exception:
                    # fallback: ƒë·ªçc r·ªìi c·∫≠p nh·∫≠t
                    logger.exception("Atomic update failed for user, falling back to read-then-write")
                    u = get_user(uid) or {"balance": 0, "current_streak": 0, "best_streak": 0}
                    new_balance = (u.get("balance") or 0) + payout
                    new_cur = (u.get("current_streak") or 0) + 1
                    new_best = max(u.get("best_streak") or 0, new_cur)
                    db_execute("UPDATE users SET balance=?, current_streak=?, best_streak=? WHERE user_id=?", (new_balance, new_cur, new_best, uid))

                winners_paid.append((uid, payout, int(amt)))
            except Exception:
                logger.exception(f"Error paying winner {uid}")
                # th√¥ng b√°o admin n·∫øu mu·ªën
                for aid in ADMIN_IDS:
                    try:
                        await app.bot.send_message(chat_id=aid, text=f"ERROR paying winner {uid} in group {chat_id}")
                    except Exception:
                        pass

        # --- Reset streak losers ---
        for uid, amt in losers:
            try:
                db_execute("UPDATE users SET current_streak=0 WHERE user_id=?", (uid,))
            except Exception:
                logger.exception(f"Failed to reset streak for user {uid}")

        # --- Special triple handling: chia pot cho winners t·ªâ l·ªá c∆∞·ª£c ---
        special_msg = ""
        try:
            if special in ("triple1", "triple6"):
                pot_amount = get_pot_amount()
                if pot_amount > 0 and winners:
                    total_bets_win = sum([amt for (_, amt) in winners]) or 0.0
                    if total_bets_win > 0:
                        for uid, amt in winners:
                            share = (amt / total_bets_win) * pot_amount
                            ensure_user(uid, "", "")
                            u = get_user(uid)
                            db_execute("UPDATE users SET balance = COALESCE(balance,0) + ? WHERE user_id=?", (share, uid))
                        special_msg = f"H≈© {int(pot_amount):,}‚Ç´ ƒë√£ ƒë∆∞·ª£c chia cho ng∆∞·ªùi th·∫Øng theo t·ª∑ l·ªá c∆∞·ª£c!"
                        reset_pot()
        except Exception:
            logger.exception("Error handling special triple")

        # --- X√≥a c∆∞·ª£c cho phi√™n n√†y (sau khi ƒë√£ tr·∫£) ---
        try:
            db_execute("DELETE FROM bets WHERE chat_id=? AND round_id=?", (chat_id, round_id))
        except Exception:
            logger.exception("Failed to delete bets for round after settlement")

        # --- Chu·∫©n b·ªã tin nh·∫Øn g·ª≠i nh√≥m ---
        display = "T√†i" if result == "tai" else "X·ªâu"
        symbol = BLACK if result == "tai" else WHITE
        history_line = format_history_line(chat_id)

        msg = f"‚ñ∂Ô∏è Phi√™n {round_index} ‚Äî K·∫øt qu·∫£: {display} {symbol}\n"
        msg += f"X√∫c x·∫Øc: {' '.join([DICE_CHARS[d-1] for d in dice])} ‚Äî T·ªïng: {total}\n"
        if special_msg:
            msg += f"\n{special_msg}\n"
        if history_line:
            msg += f"\nL·ªãch s·ª≠ ({MAX_HISTORY} g·∫ßn nh·∫•t):\n{history_line}\n"

        try:
            await app.bot.send_message(chat_id=chat_id, text=msg)
        except Exception:
            logger.exception("Cannot send round result to group")

        # --- G·ª≠i t√≥m t·∫Øt cho admin (n·∫øu c·∫ßn) ---
        if winners_paid:
            admin_summary = f"Round {round_index} in group {chat_id} completed.\nResult: {result}\nWinners:\n"
            for uid, payout, amt in winners_paid:
                admin_summary += f"- {uid}: ƒë·∫∑t {int(amt):,} -> nh·∫≠n {int(payout):,}\n"
            for aid in ADMIN_IDS:
                try:
                    await app.bot.send_message(chat_id=aid, text=admin_summary)
                except Exception:
                    logger.exception(f"Kh√¥ng g·ª≠i ƒë∆∞·ª£c admin summary cho admin {aid}")

    except Exception as e:
        logger.exception("Exception in run_round_for_group")
        # notify admins about fatal exception for this group
        for aid in ADMIN_IDS:
            try:
                await app.bot.send_message(chat_id=aid, text=f"ERROR - run_round_for_group exception for group {chat_id}: {e}\n{traceback.format_exc()}")
            except Exception:
                pass
             
async def run_round_for_group(app, chat_id, round_epoch):
    try:
        # ----- X·ª≠ l√Ω x√∫c x·∫Øc + k·∫øt qu·∫£ -----
        dice = roll_dice(3)
        total = sum(dice)
        result = "tai" if total >= 11 else "xiu"  # ho·∫∑c t√πy lu·∫≠t b·∫°n d√πng
        round_id = round_epoch

        # ----- L·∫•y danh s√°ch c∆∞·ª£c -----
        bets = db_query("SELECT * FROM bets WHERE chat_id=? AND round_id=?", (chat_id, round_id))

        winners = []
        losers = []

        for b in bets:
            uid = b["user_id"]
            amt = float(b["amount"] or 0.0)
            if b["side"] == result:
                winners.append((uid, amt))
            else:
                losers.append((uid, amt))

        # ----- C·ªông ti·ªÅn cho winners -----
        for uid, amt in winners:
            payout = amt * 2  # th·∫Øng ƒÉn g·∫•p ƒë√¥i, b·∫°n c√≥ th·ªÉ ch·ªânh n·∫øu c·∫ßn
            try:
                db_execute("UPDATE users SET balance = balance + ? WHERE user_id=?", (payout, uid))
            except Exception:
                logger.exception(f"Failed to pay winner {uid}")

        # ----- Reset streak cho losers -----
        for uid, amt in losers:
            try:
                db_execute("UPDATE users SET current_streak=0 WHERE user_id=?", (uid,))
            except Exception:
                logger.exception(f"Failed to reset streak for user {uid}")

        # ----- G·ª≠i k·∫øt qu·∫£ v√≤ng -----
        display = "T√†i" if result == "tai" else "X·ªâu"
        symbol = BLACK if result == "tai" else WHITE
        msg = f"‚ñ∂Ô∏è Phi√™n {round_id} ‚Äî K·∫øt qu·∫£: {display} {symbol}\n"
        msg += f"X√∫c x·∫Øc: {' '.join([DICE_CHARS[d-1] for d in dice])} ‚Äî T·ªïng: {total}\n"
        await app.bot.send_message(chat_id=chat_id, text=msg)

        # ----- G·ª≠i admin summary -----
        if winners:
            admin_summary = f"Round {round_id} | Group {chat_id}\nResult: {result}\nWinners:\n"
            for uid, amt in winners:
                admin_summary += f"- {uid}: ƒë·∫∑t {int(amt):,} ‚Üí nh·∫≠n {int(amt*2):,}\n"
            for aid in ADMIN_IDS:
                try:
                    await app.bot.send_message(chat_id=aid, text=admin_summary)
                except:
                    pass

    except Exception as e:
        logger.exception(f"Exception in run_round_for_group: {e}")
        # --- logic x·ª≠ l√Ω v√≤ng ch∆°i ---
        # (t√≠nh result, winners, losers, settle ti·ªÅn, v.v...)

        # üü° G·ª≠i k·∫øt qu·∫£ cho group
        display = "T√†i" if result == "tai" else "X·ªâu"
        symbol = BLACK if result == "tai" else WHITE
        history_line = format_history_line(chat_id)
        msg = f"‚ñ∂Ô∏è Phi√™n {round_index} ‚Äî K·∫øt qu·∫£: {display} {symbol}\n"
        msg += f"X√∫c x·∫Øc: {' '.join([DICE_CHARS[d-1] for d in dice])} ‚Äî T·ªïng: {total}\n"
        if special_msg:
            msg += f"\n{special_msg}\n"
        if history_line:
            msg += f"\nL·ªãch s·ª≠ ({MAX_HISTORY} g·∫ßn nh·∫•t):\n{history_line}\n"
        try:
            await app.bot.send_message(chat_id=chat_id, text=msg)
        except:
            logger.exception("Cannot send round result to group")

        # üü¢ G·ª≠i t√≥m t·∫Øt cho admin
        if winners_paid:
            admin_summary = f"Round {round_index} in group {chat_id} completed.\nResult: {result}\nWinners:\n"
            for uid, payout, amt in winners_paid:
                admin_summary += f"- {uid}: ƒë·∫∑t {int(amt):,} -> nh·∫≠n {int(payout):,}\n"
            for aid in ADMIN_IDS:
                try:
                    await app.bot.send_message(chat_id=aid, text=admin_summary)
                except:
                    pass

    except Exception as e:
        logger.exception(f"Exception in run_round_for_group: {e}")

        # unlock group
        try:
            await unlock_group_chat(app.bot, chat_id)
        except:
            pass

    except Exception as e:
        logger.exception("Exception in run_round_for_group")
        for aid in ADMIN_IDS:
            try:
                await app.bot.send_message(
                    chat_id=aid,
                    text=f"ERROR - run_round_for_group exception for group {chat_id}: {e}\n{traceback.format_exc()}"
                )
            except:
                pass

# rounds orchestrator: waits for epoch boundaries and coordinates countdowns
async def rounds_loop(app: Application):
    logger.info("Rounds orchestrator started")
    await asyncio.sleep(2)
    while True:
        try:
            now_ts = int(datetime.utcnow().timestamp())
            next_epoch_ts = ((now_ts // ROUND_SECONDS) + 1) * ROUND_SECONDS
            rem = next_epoch_ts - now_ts

            if rem > 30:
                await asyncio.sleep(rem - 30)
                rows = db_query("SELECT chat_id FROM groups WHERE approved=1 AND running=1")
                for r in rows:
                    asyncio.create_task(send_countdown(app.bot, r["chat_id"], 30))
                await asyncio.sleep(20)
                rows = db_query("SELECT chat_id FROM groups WHERE approved=1 AND running=1")
                for r in rows:
                    asyncio.create_task(send_countdown(app.bot, r["chat_id"], 10))
                await asyncio.sleep(5)
                rows = db_query("SELECT chat_id FROM groups WHERE approved=1 AND running=1")
                for r in rows:
                    asyncio.create_task(send_countdown(app.bot, r["chat_id"], 5))
                await asyncio.sleep(5)
            else:
                # if less than 30s remain, send appropriate countdowns
                if rem > 10:
                    await asyncio.sleep(rem - 10)
                    rows = db_query("SELECT chat_id FROM groups WHERE approved=1 AND running=1")
                    for r in rows:
                        asyncio.create_task(send_countdown(app.bot, r["chat_id"], 10))
                    await asyncio.sleep(5)
                    rows = db_query("SELECT chat_id FROM groups WHERE approved=1 AND running=1")
                    for r in rows:
                        asyncio.create_task(send_countdown(app.bot, r["chat_id"], 5))
                    await asyncio.sleep(5)
                elif rem > 5:
                    await asyncio.sleep(rem - 5)
                    rows = db_query("SELECT chat_id FROM groups WHERE approved=1 AND running=1")
                    for r in rows:
                        asyncio.create_task(send_countdown(app.bot, r["chat_id"], 5))
                    await asyncio.sleep(5)
                else:
                    # rem <=5
                    rows = db_query("SELECT chat_id FROM groups WHERE approved=1 AND running=1")
                    for r in rows:
                        asyncio.create_task(send_countdown(app.bot, r["chat_id"], 5))
                    await asyncio.sleep(rem)

            # run rounds at boundary
            round_epoch = int(datetime.utcnow().timestamp()) // ROUND_SECONDS
            rows = db_query("SELECT chat_id FROM groups WHERE approved=1 AND running=1")
            tasks = []
            for r in rows:
                tasks.append(asyncio.create_task(run_round_for_group(app, r["chat_id"], round_epoch)))
            if tasks:
                await asyncio.gather(*tasks, return_exceptions=True)

        except Exception:
            logger.exception("Exception in rounds_loop")
            for aid in ADMIN_IDS:
                try:
                    await app.bot.send_message(chat_id=aid, text=f"ERROR - rounds_loop exception:\n{traceback.format_exc()}")
                except:
                    pass

# -----------------------
# Startup / Shutdown + Main entrypoint (PTB v20+ chu·∫©n)
# -----------------------
import traceback
import asyncio
import random

async def run_round_for_group(app, chat_id, round_epoch):
    """
    X·ª≠ l√Ω 1 v√≤ng ch∆°i cho group chat_id.
    round_epoch ƒë∆∞·ª£c rounds_loop t√≠nh s·∫µn -> d√πng ƒë·ªÉ t·∫°o round_id nh·∫•t qu√°n.
    """
    try:
        round_index = int(round_epoch)
        round_id = f"{chat_id}_{round_epoch}"

        # l·∫•y c∆∞·ª£c cho ch√≠nh round n√†y (ch·ªâ round_id hi·ªán t·∫°i)
        bets_rows = db_query("SELECT user_id, side, amount FROM bets WHERE chat_id=? AND round_id=?", (chat_id, round_id))
        bets = [dict(r) for r in bets_rows] if bets_rows else []

        # l·∫•y ch·∫ø ƒë·ªô nh√≥m (force/bettai...)
        grows = db_query("SELECT bet_mode FROM groups WHERE chat_id=?", (chat_id,))
        bet_mode = grows[0]["bet_mode"] if grows else "random"

        # quy·∫øt ƒë·ªãnh forcedValue n·∫øu admin ƒë√£ set
        forced_value = None
        if bet_mode == "force_tai":
            forced_value = "tai"
            # revert one-shot
            db_execute("UPDATE groups SET bet_mode='random' WHERE chat_id=?", (chat_id,))
        elif bet_mode == "force_xiu":
            forced_value = "xiu"
            db_execute("UPDATE groups SET bet_mode='random' WHERE chat_id=?", (chat_id,))
        elif bet_mode == "bettai":
            forced_value = "tai"
        elif bet_mode == "betxiu":
            forced_value = "xiu"

        # G·ª≠i th√¥ng b√°o b·∫Øt ƒë·∫ßu/quay (GIF n·∫øu c√≥)
        try:
            # n·∫øu b·∫°n c√≥ bi·∫øn DICE_SPIN_GIF_URL (ƒë·∫∑t ·ªü ƒë·∫ßu file) d√πng GIF 3D, n·∫øu kh√¥ng c√≥ s·∫Ω b·ªè qua
            if 'DICE_SPIN_GIF_URL' in globals() and DICE_SPIN_GIF_URL:
                try:
                    await app.bot.send_animation(chat_id=chat_id, animation=DICE_SPIN_GIF_URL, caption="üîÑ Quay x√∫c x·∫Øc...")
                    await asyncio.sleep(0.8)
                except Exception:
                    pass
            else:
                # fallback: 1 tin nh·∫Øn text th√¥ng b√°o
                await app.bot.send_message(chat_id=chat_id, text=f"üé≤ Phi√™n {round_index} ‚Äî ƒêang tung x√∫c x·∫Øc...")
        except Exception:
            pass

        # T·∫°o k·∫øt qu·∫£: n·∫øu c√≥ forced_value th√¨ t√¨m dice ph√π h·ª£p, c√≤n kh√¥ng th√¨ random t·ª´ng vi√™n
        dice = []
        special = None
        total = 0

        if forced_value:
            # generate until match or timeout
            attempts = 0
            dice, total, special = roll_three_dice_random()
            while result_from_total(total) != forced_value and attempts < 200:
                dice, total, special = roll_three_dice_random()
                attempts += 1
            # send GIF already g·ª≠i, b√¢y gi·ªù g·ª≠i t·ª´ng vi√™n ƒë·ªÉ hi·ªÉn th·ªã
            for v in dice:
                try:
                    await app.bot.send_message(chat_id=chat_id, text=f"{DICE_CHARS[v-1]}")
                except:
                    pass
                await asyncio.sleep(1.0)
        else:
            # g·ª≠i l·∫ßn l∆∞·ª£t 3 vi√™n, 1s m·ªói vi√™n
            a = roll_one_die(); dice.append(a)
            try: await app.bot.send_message(chat_id=chat_id, text=f"{DICE_CHARS[a-1]}")
            except: pass
            await asyncio.sleep(1.0)

            b = roll_one_die(); dice.append(b)
            try: await app.bot.send_message(chat_id=chat_id, text=f"{DICE_CHARS[b-1]}")
            except: pass
            await asyncio.sleep(1.0)

            c = roll_one_die(); dice.append(c)
            try: await app.bot.send_message(chat_id=chat_id, text=f"{DICE_CHARS[c-1]}")
            except: pass

            total = sum(dice)
            if dice.count(1) == 3:
                special = "triple1"
            elif dice.count(6) == 3:
                special = "triple6"

            # ensure total assigned if not above
            if total == 0:
                total = sum(dice)

        # compute final result
        result = result_from_total(total)

        # persist history
        dice_str = ",".join(map(str, dice))
        try:
            db_execute(
                "INSERT INTO history(chat_id, round_index, round_id, result, dice, timestamp) VALUES (?, ?, ?, ?, ?, ?)",
                (chat_id, round_index, round_id, result, dice_str, now_iso())
            )
        except Exception:
            logger.exception("Failed to insert history")

        # ------- T√≠nh winners/losers -------
winners = []
losers = []
total_winner_bets = 0.0
total_loser_bets = 0.0
for b in bets:
    amt_f = float(b.get("amount") or 0.0)
    if b.get("side") == result:
        winners.append((int(b["user_id"]), amt_f))
        total_winner_bets += amt_f
    else:
        losers.append((int(b["user_id"]), amt_f))
        total_loser_bets += amt_f

# Losers -> pot
try:
    if total_loser_bets > 0:
        db_execute("UPDATE pot SET amount = amount + ? WHERE id = 1", (total_loser_bets,))
except Exception:
    logger.exception("Failed to add losers to pot")

# -------- TR·∫¢ TH∆Ø·ªûNG --------
winners_paid = []
for uid, amt in winners:
    try:
        house_share = amt * HOUSE_RATE
        payout = amt * WIN_MULTIPLIER

        # c·ªông house share v√†o pot
        if house_share > 0:
            try:
                db_execute("UPDATE pot SET amount = amount + ? WHERE id = 1", (house_share,))
            except Exception:
                logger.exception("Failed to add house share to pot")

        # ƒë·∫£m b·∫£o user t·ªìn t·∫°i
        ensure_user(uid, "", "")

        # c·ªông ti·ªÅn th·∫Øng cho user
        db_execute(
            """
            UPDATE users SET
                balance = COALESCE(balance, 0) + ?,
                current_streak = COALESCE(current_streak, 0) + 1,
                best_streak = CASE
                    THEN COALESCE(current_streak, 0) + 1 > COALESCE(best_streak, 0)
                    THEN COALESCE(current_streak, 0) + 1
                    ELSE COALESCE(best_streak, 0)
                END
            WHERE user_id = ?
            """,
            (payout, uid)
        )

        winners_paid.append((uid, payout, amt))
    except Exception:
        logger.exception(f"Error paying winner {uid}")

        # Special triple distributions (3x1 or 3x6) -> share pot proportionally
        special_msg = ""
        if special in ("triple1", "triple6"):
            try:
                pot_amount = get_pot_amount()
                if pot_amount > 0 and winners:
                    total_bets_win = sum([amt for (_, amt) in winners]) or 0.0
                    if total_bets_win > 0:
                        for uid, amt in winners:
                            share = (amt / total_bets_win) * pot_amount
                            ensure_user(uid, "", "")
                            u = get_user(uid) or {"balance": 0}
                            db_execute("UPDATE users SET balance=? WHERE user_id=?", ((u["balance"] or 0.0) + share, uid))
                        special_msg = f"H≈© {int(pot_amount):,}‚Ç´ ƒë√£ ƒë∆∞·ª£c chia cho ng∆∞·ªùi th·∫Øng theo t·ª∑ l·ªá c∆∞·ª£c!"
                        reset_pot()
            except Exception:
                logger.exception("Error distributing special pot")

        # X√≥a bets ch·ªâ c·ªßa round n√†y (kh√¥ng x√≥a t·∫•t c·∫£)
        try:
            db_execute("DELETE FROM bets WHERE chat_id=? AND round_id=?", (chat_id, round_id))
        except Exception:
            logger.exception("Failed to delete bets for round")

        # Chu·∫©n b·ªã v√† g·ª≠i tin nh·∫Øn k·∫øt qu·∫£
        display = "T√†i" if result == "tai" else "X·ªâu"
        symbol = BLACK if result == "tai" else WHITE
        history_line = format_history_line(chat_id)
        msg = f"‚ñ∂Ô∏è Phi√™n {round_index} ‚Äî K·∫øt qu·∫£: {display} {symbol}\n"
        msg += f"X√∫c x·∫Øc: {' '.join([DICE_CHARS[d-1] for d in dice])} ‚Äî T·ªïng: {total}\n"
        if special_msg:
            msg += f"\n{special_msg}\n"
        if history_line:
            msg += f"\nL·ªãch s·ª≠ ({MAX_HISTORY} g·∫ßn nh·∫•t):\n{history_line}\n"

        try:
            await app.bot.send_message(chat_id=chat_id, text=msg)
        except Exception:
            logger.exception("Cannot send round result to group")

        # G·ª≠i b√°o c√°o cho admin (n·∫øu c√≥ ng∆∞·ªùi tr√∫ng)
        if winners_paid:
            admin_summary = f"Round {round_index} in group {chat_id} completed.\nResult: {result}\nWinners:\n"
            for uid, payout, amt in winners_paid:
                admin_summary += f"- {uid}: ƒë·∫∑t {int(amt):,} -> nh·∫≠n {int(payout):,}\n"
            for aid in ADMIN_IDS:
                try:
                    await app.bot.send_message(chat_id=aid, text=admin_summary)
                except Exception:
                    pass

        # M·ªü l·∫°i chat (n·∫øu tr∆∞·ªõc ƒë√≥ b·ªã kho√°)
        try:
            await unlock_group_chat(app.bot, chat_id)
        except Exception:
            pass

    except Exception as e:
        logger.exception("Exception in run_round_for_group")
        for aid in ADMIN_IDS:
            try:
                await app.bot.send_message(chat_id=aid, text=f"ERROR - run_round_for_group exception for group {chat_id}: {e}\n{traceback.format_exc()}")
            except Exception:
                pass
        
async def on_startup(app: Application):
    """H√†m ch·∫°y khi bot kh·ªüi ƒë·ªông."""
    logger.info("Bot starting up...")
    init_db()

    # notify admins
    for aid in ADMIN_IDS:
        try:
            await app.bot.send_message(chat_id=aid, text="‚úÖ Bot ƒë√£ kh·ªüi ƒë·ªông v√† s·∫µn s√†ng.")
        except Exception as e:
            logger.warning(f"Kh√¥ng g·ª≠i ƒë∆∞·ª£c tin nh·∫Øn startup cho admin {aid}: {e}")

    # ch·∫°y v√≤ng quay t√†i x·ªâu n·ªÅn
    loop = asyncio.get_running_loop()
    loop.create_task(rounds_loop(app))


async def on_shutdown(app: Application):
    """H√†m ch·∫°y khi bot shutdown."""
    logger.info("Bot shutting down...")
    for aid in ADMIN_IDS:
        try:
            await app.bot.send_message(chat_id=aid, text="‚ö†Ô∏è Bot ƒëang t·∫Øt (shutdown).")
        except Exception as e:
            logger.warning(f"Kh√¥ng g·ª≠i ƒë∆∞·ª£c tin nh·∫Øn shutdown cho admin {aid}: {e}")

# ==============================
# Handler r√∫t ti·ªÅn (d√°n tr∆∞·ªõc h√†m main)
# ==============================
from telegram import Update
from telegram.ext import ContextTypes

async def ruttien_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω l·ªánh r√∫t ti·ªÅn t·ª´ ng∆∞·ªùi ch∆°i."""
    try:
        args = context.args
        if len(args) < 3:
            await update.message.reply_text(
                "‚ö†Ô∏è C√∫ ph√°p kh√¥ng ƒë√∫ng!\nD√πng: /ruttien <Ng√¢n h√†ng> <S·ªë TK> <S·ªë ti·ªÅn>"
            )
            return

        bank = args[0]
        account = args[1]
        try:
            amount = int(args[2])
        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá.")
            return

        if amount < 100000:
            await update.message.reply_text("‚ö†Ô∏è S·ªë ti·ªÅn r√∫t t·ªëi thi·ªÉu l√† 100.000ƒë.")
            return

        # (gi·∫£ l·∫≠p ki·ªÉm tra s·ªë d∆∞)
        balance = 9999999  
        if amount > balance:
            await update.message.reply_text("‚ö†Ô∏è S·ªë d∆∞ kh√¥ng ƒë·ªß.")
            return

        await update.message.reply_text(
            f"‚úÖ ƒê√£ nh·∫≠n y√™u c·∫ßu r√∫t {amount:,}ƒë v·ªÅ {bank} ({account}).\nƒêang x·ª≠ l√Ω..."
        )

    except Exception as e:
        await update.message.reply_text("‚ùå L·ªói h·ªá th·ªëng khi x·ª≠ l√Ω y√™u c·∫ßu r√∫t ti·ªÅn.")
        print("ruttien_handler error:", e)

# ==============================
# H√†m main ‚Äî ƒë·ªÉ nguy√™n b√™n d∆∞·ªõi
# ==============================
def main():
    """Main entrypoint ‚Äî d√πng run_polling() thay cho updater.start_polling()"""
    if not BOT_TOKEN or BOT_TOKEN == "PUT_YOUR_BOT_TOKEN_HERE":
        print("‚ùå ERROR: BOT_TOKEN not set. Please set BOT_TOKEN env variable.")
        return

    # Kh·ªüi t·∫°o database
    init_db()

    # T·∫°o app
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # ----- ƒêƒÉng k√Ω HANDLERS -----
    # user
    app.add_handler(CommandHandler("start", start_handler))
    app.add_handler(CommandHandler("game", game_info))
    app.add_handler(CommandHandler("nap", nap_info))
    app.add_handler(CommandHandler("ruttien", ruttien_handler))
    app.add_handler(CallbackQueryHandler(withdraw_callback_handler, pattern=r"^withdraw_.*|^withdraw.*"))
    app.add_handler(CallbackQueryHandler(callback_query_handler, pattern=r"^game_.*"))

    # admin
    app.add_handler(CommandHandler("addmoney", addmoney_handler))
    app.add_handler(CommandHandler("top10", top10_handler))
    app.add_handler(CommandHandler("balances", balances_handler))
    app.add_handler(CommandHandler("KqTai", admin_force_handler))
    app.add_handler(CommandHandler("KqXiu", admin_force_handler))
    app.add_handler(CommandHandler("bettai", admin_force_handler))
    app.add_handler(CommandHandler("betxiu", admin_force_handler))
    app.add_handler(CommandHandler("tatbet", admin_force_handler))
    app.add_handler(CommandHandler("code", admin_create_code_handler))
    app.add_handler(CommandHandler("nhancode", redeem_code_handler))

    # group control
    app.add_handler(CommandHandler("batdau", batdau_handler))
    app.add_handler(CallbackQueryHandler(approve_callback_handler, pattern=r"^(approve|deny)\|"))

    # bets & private menu
    app.add_handler(MessageHandler(filters.Regex(r"^/[TtXx]\d+"), bet_message_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, menu_text_handler))

    # lifecycle hooks
    app.post_init = on_startup
    app.post_shutdown = on_shutdown

    # ----- CH·∫†Y BOT -----
    try:
        logger.info("üöÄ Bot starting... using run_polling()")
        app.run_polling(poll_interval=1.0, timeout=20)
    except Exception as e:
        logger.exception(f"‚ùå Fatal error in main(): {e}")
        # Notify admins n·∫øu bot crash
        for aid in ADMIN_IDS:
            try:
                app.bot.send_message(chat_id=aid, text=f"‚ùå Bot crashed: {e}")
            except Exception:
                pass


# -----------------------
# Helper command wrappers
# -----------------------

async def game_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üé≤ *Game: T√†i X·ªâu (x√∫c x·∫Øc 3 con)*\n"
        "- T√†i: t·ªïng 11‚Äì17\n"
        "- X·ªâu: t·ªïng 4‚Äì10\n"
        "- M·ªói phi√™n 60s\n"
        "- ƒê·∫∑t c∆∞·ª£c b·∫±ng: /T<ti·ªÅn> ho·∫∑c /X<ti·ªÅn>\n"
        "üëâ Tham gia nh√≥m ch∆°i: @VET789cc",
        parse_mode="Markdown",
    )


async def nap_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üí∞ ƒê·ªÉ n·∫°p ti·ªÅn, li√™n h·ªá: @HOANGDUNGG789")


# -----------------------
# Run as script
# -----------------------
if __name__ == "__main__":
    try:
        main()
    except Exception:
        logger.exception("Fatal error in main()")
