# bot.py
# Telegram T√†i X·ªâu Bot - ho√†n ch·ªânh (60s/phi√™n, 3 x√∫c x·∫Øc l·∫ßn l∆∞·ª£t, h≈©, admin controls)
# WARNING: Token ƒë∆∞·ª£c ch√®n tr·ª±c ti·∫øp theo y√™u c·∫ßu. N·∫øu repo public: RISK.

import os
import sys
import sqlite3
import random
import math
import traceback
import logging
import threading
import http.server
import socketserver
import asyncio
from datetime import datetime
from typing import List, Tuple, Optional, Dict, Any

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup,
    KeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler,
    filters, Application
)

# -----------------------
# KEEP A PORT OPEN (for Render if using Web Service)
# -----------------------
def keep_port_open():
    PORT = int(os.environ.get("PORT_KEEP", 10000))
    Handler = http.server.SimpleHTTPRequestHandler
    try:
        with socketserver.TCPServer(("", PORT), Handler) as httpd:
            httpd.serve_forever()
    except Exception:
        # if fails, ignore (likely port in use)
        pass

threading.Thread(target=keep_port_open, daemon=True).start()

# -----------------------
# CONFIGURATION
# -----------------------

# NOTE: As requested, token is pasted directly here.
BOT_TOKEN = "7969189609:AAFG1-vmQEC_4nfgieG1fhUdWTWA8AsJt1I"

# Admin IDs
ADMIN_IDS = [7760459637, 6942793864]

# Constants
ROUND_SECONDS = 60  # seconds per round
MIN_BET = 1000
INITIAL_FREE = 10_000
WIN_MULTIPLIER = 1.97
HOUSE_RATE = 0.03  # 3% of winners goes to pot
DB_FILE = "tx_bot_data.db"
MAX_HISTORY = 20  # max rounds to show in history

# logging
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# -----------------------
# DATABASE
# -----------------------

def get_db_connection():
    conn = sqlite3.connect(DB_FILE, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.executescript("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        balance REAL DEFAULT 0,
        total_deposited REAL DEFAULT 0,
        total_bet_volume REAL DEFAULT 0,
        current_streak INTEGER DEFAULT 0,
        best_streak INTEGER DEFAULT 0,
        created_at TEXT,
        received_bonus INTEGER DEFAULT 0,  -- 1 if got initial 10k
        restricted_onek INTEGER DEFAULT 0  -- 1 if restricted to bet 1k only
    );
    CREATE TABLE IF NOT EXISTS groups (
        chat_id INTEGER PRIMARY KEY,
        title TEXT,
        approved INTEGER DEFAULT 0,
        running INTEGER DEFAULT 0,
        bet_mode TEXT DEFAULT 'random',
        last_round INTEGER DEFAULT 0
    );
    CREATE TABLE IF NOT EXISTS bets (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        chat_id INTEGER,
        round_id TEXT,
        user_id INTEGER,
        side TEXT,
        amount REAL,
        timestamp TEXT
    );
    CREATE TABLE IF NOT EXISTS history (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        chat_id INTEGER,
        round_index INTEGER,
        round_id TEXT,
        result TEXT,
        dice TEXT,
        timestamp TEXT
    );
    CREATE TABLE IF NOT EXISTS pot (
        id INTEGER PRIMARY KEY CHECK (id=1),
        amount REAL DEFAULT 0
    );
    """)
    cur.execute("INSERT OR IGNORE INTO pot(id, amount) VALUES (1, 0)")
    conn.commit()
    conn.close()

def db_execute(query: str, params: Tuple = ()):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute(query, params)
    conn.commit()
    lastrowid = cur.lastrowid
    conn.close()
    return lastrowid

def db_query(query: str, params: Tuple = ()):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute(query, params)
    rows = cur.fetchall()
    conn.close()
    return rows

# -----------------------
# UTILITIES
# -----------------------

def now_iso():
    return datetime.utcnow().isoformat()

def ensure_user(user_id: int, username: str = "", first_name: str = ""):
    rows = db_query("SELECT user_id FROM users WHERE user_id=?", (user_id,))
    if not rows:
        db_execute(
            "INSERT INTO users(user_id, username, first_name, balance, total_deposited, total_bet_volume, current_streak, best_streak, created_at, received_bonus, restricted_onek) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
            (user_id, username or "", first_name or "", 0.0, 0.0, 0.0, 0, 0, now_iso(), 0, 0)
        )

def get_user(user_id: int) -> Optional[Dict[str, Any]]:
    rows = db_query("SELECT * FROM users WHERE user_id=?", (user_id,))
    return dict(rows[0]) if rows else None

def add_balance(user_id: int, amount: float):
    ensure_user(user_id, "", "")
    u = get_user(user_id)
    new_bal = (u["balance"] or 0.0) + amount
    db_execute("UPDATE users SET balance=? WHERE user_id=?", (new_bal, user_id))
    return new_bal

def set_balance(user_id: int, amount: float):
    ensure_user(user_id, "", "")
    db_execute("UPDATE users SET balance=? WHERE user_id=?", (amount, user_id))

def add_to_pot(amount: float):
    rows = db_query("SELECT amount FROM pot WHERE id=1")
    current = rows[0]["amount"] if rows else 0.0
    new = current + amount
    db_execute("UPDATE pot SET amount=? WHERE id=1", (new,))

def get_pot_amount() -> float:
    rows = db_query("SELECT amount FROM pot WHERE id=1")
    return rows[0]["amount"] if rows else 0.0

def reset_pot():
    db_execute("UPDATE pot SET amount=? WHERE id=1", (0.0,))

# -----------------------
# DICE / RESULT HELPERS
# -----------------------

# unicode dice chars U+2680..U+2685 => ‚öÄ‚öÅ‚öÇ‚öÉ‚öÑ‚öÖ
DICE_CHARS = ["\u2680", "\u2681", "\u2682", "\u2683", "\u2684", "\u2685"]
WHITE = "‚ö™"  # X·ªâu
BLACK = "‚ö´"  # T√†i

def roll_one_die() -> int:
    return random.randint(1, 6)

def roll_three_dice_random() -> Tuple[List[int], int, Optional[str]]:
    a = roll_one_die()
    b = roll_one_die()
    c = roll_one_die()
    dice = [a, b, c]
    total = sum(dice)
    special = None
    if dice.count(1) == 3:
        special = "triple1"
    elif dice.count(6) == 3:
        special = "triple6"
    return dice, total, special

def result_from_total(total: int) -> str:
    if 11 <= total <= 17:
        return "tai"
    elif 4 <= total <= 10:
        return "xiu"
    else:
        return "invalid"

# -----------------------
# TELEGRAM BOT HANDLERS
# -----------------------

MAIN_MENU = ReplyKeyboardMarkup(
    [
        [KeyboardButton("Game"), KeyboardButton("N·∫°p ti·ªÅn")],
        [KeyboardButton("R√∫t ti·ªÅn"), KeyboardButton("S·ªë d∆∞")]
    ],
    resize_keyboard=True
)

async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    ensure_user(user.id, user.username or "", user.first_name or "")
    u = get_user(user.id)
    greeted = False
    # If never received bonus, give initial free and restrict to 1k bets
    if u and u.get("received_bonus", 0) == 0:
        add_balance(user.id, INITIAL_FREE)
        db_execute("UPDATE users SET total_deposited=?, received_bonus=1, restricted_onek=1 WHERE user_id=?", (INITIAL_FREE, user.id))
        greeted = True

    text = f"Xin ch√†o {user.first_name or 'b·∫°n'}! üëã\n\n"
    text += "Ch√†o m·ª´ng ƒë·∫øn v·ªõi bot T√†i X·ªâu t·ª± ƒë·ªông.\n"
    if greeted:
        text += f"B·∫°n ƒë√£ ƒë∆∞·ª£c t·∫∑ng {INITIAL_FREE:,}‚Ç´ mi·ªÖn ph√≠ (m·ªôt l·∫ßn). L∆∞u √Ω: trong ch·∫ø ƒë·ªô t·∫∑ng, b·∫°n ch·ªâ ƒë∆∞·ª£c c∆∞·ª£c t·ªëi ƒëa 1.000‚Ç´ m·ªói l·∫ßn. N·∫øu mu·ªën ch∆°i tho·∫£i m√°i, h√£y li√™n h·ªá admin ƒë·ªÉ c·ªông ti·ªÅn.\n\n"
    text += "Menu:\n"
    text += "- Game: th√¥ng tin & link nh√≥m\n"
    text += "- N·∫°p ti·ªÅn: h∆∞·ªõng d·∫´n n·∫°p\n"
    text += "- R√∫t ti·ªÅn: /ruttien <Ng√¢n h√†ng> <S·ªë TK> <S·ªë ti·ªÅn>\n"
    text += "- ƒê·∫∑t c∆∞·ª£c trong nh√≥m: /T<amount> ho·∫∑c /X<amount>\n"
    text += "\nB·∫°n c√≥ th·ªÉ d√πng ph√≠m menu ho·∫∑c l·ªánh tr·ª±c ti·∫øp."
    await update.message.reply_text(text, reply_markup=MAIN_MENU)

async def menu_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().lower()
    if text == "game":
        return await game_info(update, context)
    if text in ("n·∫°p ti·ªÅn", "nap tien", "n·∫°p"):
        return await nap_info(update, context)
    if text in ("r√∫t ti·ªÅn", "rut tien", "ruttien"):
        return await ruttien_help(update, context)
    if text in ("s·ªë d∆∞", "so du"):
        u = get_user(update.effective_user.id)
        bal = int(u["balance"]) if u else 0
        await update.message.reply_text(f"S·ªë d∆∞ hi·ªán t·∫°i: {bal:,}‚Ç´")

async def game_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "Game: T√†i X·ªâu (x√∫c x·∫Øc 3 con)\n\n"
    text += "Lu·∫≠t ch√≠nh:\n- T√†i: t·ªïng 11-17 (ƒêen)\n- X·ªâu: t·ªïng 4-10 (Tr·∫Øng)\n"
    text += f"- Phi√™n ch·∫°y m·ªói {ROUND_SECONDS} gi√¢y khi nh√≥m ƒë∆∞·ª£c admin duy·ªát & b·∫≠t /batdau.\n"
    text += f"- Th·∫Øng nh·∫≠n x{WIN_MULTIPLIER} (house gi·ªØ {int(HOUSE_RATE*100)}% m·ªói kho·∫£n th·∫Øng v√†o h≈©).\n"
    text += "- N·∫øu ra 3 con 1 ho·∫∑c 3 con 6 ‚Üí h≈© ƒë∆∞·ª£c chia cho nh·ªØng ng∆∞·ªùi th·∫Øng phi√™n ƒë√≥ theo t·ªâ l·ªá c∆∞·ª£c.\n\n"
    text += "Link nh√≥m: @VET789cc\n"
    text += "Gi·ªõi thi·ªáu: ƒê·∫∑t c∆∞·ª£c b·∫±ng l·ªánh /T<amount> ho·∫∑c /X<amount> trong nh√≥m khi bot ƒëang ch·∫°y."
    await update.message.reply_text(text)

async def nap_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ƒê·ªÉ n·∫°p ti·ªÅn, li√™n h·ªá: @HOANGDUNGG789")

async def ruttien_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "ƒê·ªÉ r√∫t ti·ªÅn h√£y nh·∫≠p l·ªánh:\n"
        "/ruttien <Ng√¢n h√†ng> <S·ªë t√†i kho·∫£n> <S·ªë ti·ªÅn>\n\n"
        "R√∫t t·ªëi thi·ªÉu 100000 vnƒë.\n"
        "B·∫°n ph·∫£i c∆∞·ª£c t·ªëi thi·ªÉu 0.9 v√≤ng c∆∞·ª£c (0.9x t·ªïng ƒë√£ n·∫°p).\n"
    )
    await update.message.reply_text(text)

async def ruttien_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    ensure_user(user.id, user.username or "", user.first_name or "")
    args = context.args
    if len(args) < 3:
        await update.message.reply_text("Sai c√∫ ph√°p. V√≠ d·ª•: /ruttien Vietcombank 0123456789 100000")
        return
    bank = args[0]
    account = args[1]
    try:
        amount = int(args[2])
    except:
        await update.message.reply_text("S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá.")
        return
    if amount < 100000:
        await update.message.reply_text("R√∫t t·ªëi thi·ªÉu 100000 vnƒë.")
        return
    u = get_user(user.id)
    if not u:
        await update.message.reply_text("Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n.")
        return
    total_deposited = u["total_deposited"] or 0.0
    total_bet_volume = u["total_bet_volume"] or 0.0
    required = 0.9 * total_deposited
    if total_deposited > 0 and total_bet_volume < required:
        await update.message.reply_text(f"B·∫°n ch∆∞a c∆∞·ª£c ƒë·ªß. C·∫ßn c∆∞·ª£c t·ªëi thi·ªÉu {required:,.0f} (ƒë√£ c∆∞·ª£c {total_bet_volume:,.0f}).")
        return
    if amount > u["balance"]:
        await update.message.reply_text("S·ªë d∆∞ kh√¥ng ƒë·ªß.")
        return

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("Th√†nh c√¥ng", callback_data=f"withdraw_ok|{user.id}|{amount}|{bank}|{account}"),
         InlineKeyboardButton("T·ª´ ch·ªëi", callback_data=f"withdraw_no|{user.id}|{amount}|{bank}|{account}")]
    ])
    await update.message.reply_text("Vui l√≤ng ch·ªù, n·∫øu sau 1 ti·∫øng ch∆∞a th·∫•y th√¥ng b√°o Th√†nh c√¥ng/T·ª´ ch·ªëi th√¨ nh·∫Øn admin nh√©!")
    text = f"Y√äU C·∫¶U R√öT TI·ªÄN\nUser: @{user.username or user.first_name} (id: {user.id})\nBank: {bank}\nAccount: {account}\nAmount: {amount:,}‚Ç´"
    for aid in ADMIN_IDS:
        try:
            await context.bot.send_message(chat_id=aid, text=text, reply_markup=kb)
        except Exception:
            logger.exception(f"Cannot notify admin {aid} for withdraw request")

async def withdraw_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    parts = data.split("|")
    action = parts[0]
    try:
        user_id = int(parts[1])
        amount = int(parts[2])
        bank = parts[3]
        account = parts[4]
    except Exception:
        await query.edit_message_text("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.")
        return
    if query.from_user.id not in ADMIN_IDS:
        await query.edit_message_text("Ch·ªâ admin m·ªõi thao t√°c.")
        return
    if action == "withdraw_ok":
        u = get_user(user_id)
        if not u:
            await query.edit_message_text("User kh√¥ng t·ªìn t·∫°i.")
            return
        if u["balance"] < amount:
            await query.edit_message_text("User kh√¥ng ƒë·ªß ti·ªÅn.")
            try:
                await context.bot.send_message(chat_id=user_id, text=f"Y√™u c·∫ßu r√∫t {amount:,}‚Ç´ b·ªã t·ª´ ch·ªëi: s·ªë d∆∞ kh√¥ng ƒë·ªß.")
            except:
                pass
            return
        new_bal = u["balance"] - amount
        db_execute("UPDATE users SET balance=? WHERE user_id=?", (new_bal, user_id))
        await query.edit_message_text(f"ƒê√£ x√°c nh·∫≠n r√∫t {amount:,}‚Ç´ cho user {user_id}.")
        try:
            await context.bot.send_message(chat_id=user_id, text=f"Y√™u c·∫ßu r√∫t {amount:,}‚Ç´ ƒë√£ ƒë∆∞·ª£c duy·ªát b·ªüi admin. Vui l√≤ng ch·ªù chuy·ªÉn kho·∫£n.")
        except:
            pass
    else:
        await query.edit_message_text(f"Y√™u c·∫ßu r√∫t {amount:,}‚Ç´ ƒë√£ b·ªã t·ª´ ch·ªëi b·ªüi admin {query.from_user.id}.")
        try:
            await context.bot.send_message(chat_id=user_id, text=f"Y√™u c·∫ßu r√∫t {amount:,}‚Ç´ ƒë√£ b·ªã t·ª´ ch·ªëi b·ªüi admin. Vui l√≤ng li√™n h·ªá.")
        except:
            pass

# -----------------------
# BET HANDLING
# -----------------------

async def bet_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if msg is None or msg.text is None:
        return
    text = msg.text.strip()
    user = update.effective_user
    chat = update.effective_chat
    if not text.startswith("/"):
        return
    cmd = text[1:]
    if len(cmd) < 2:
        return
    prefix = cmd[0].lower()
    if prefix not in ('t', 'x'):
        return
    side = 'tai' if prefix == 't' else 'xiu'
    try:
        amount = int(cmd[1:])
    except:
        await msg.reply_text("C√∫ ph√°p ƒë·∫∑t c∆∞·ª£c sai. V√≠ d·ª•: /T1000 ho·∫∑c /X5000")
        return
    if amount < MIN_BET:
        await msg.reply_text(f"ƒê·∫∑t c∆∞·ª£c t·ªëi thi·ªÉu {MIN_BET:,}‚Ç´")
        return

    # group check
    if chat.type in ("group", "supergroup"):
        g = db_query("SELECT approved, running FROM groups WHERE chat_id=?", (chat.id,))
        if not g or g[0]["approved"] != 1 or g[0]["running"] != 1:
            await msg.reply_text("Nh√≥m n√†y ch∆∞a ƒë∆∞·ª£c admin duy·ªát ho·∫∑c ch∆∞a b·∫≠t /batdau.")
            return

    ensure_user(user.id, user.username or "", user.first_name or "")
    u = get_user(user.id)

    # restricted check: if restricted_onek ==1 then amount must equal 1000 (or <=1000)
    if u and u.get("restricted_onek", 0) == 1:
        if amount > 1000:
            await msg.reply_text("B·∫°n ƒëang ·ªü ch·∫ø ƒë·ªô t·∫∑ng th∆∞·ªüng (10k) v√† ch·ªâ ƒë∆∞·ª£c c∆∞·ª£c t·ªëi ƒëa 1.000‚Ç´. Li√™n h·ªá admin ƒë·ªÉ m·ªü gi·ªõi h·∫°n.")
            return

    if (u["balance"] or 0.0) < amount:
        await msg.reply_text("S·ªë d∆∞ kh√¥ng ƒë·ªß.")
        return

    # deduct immediately and update total_bet_volume
    new_balance = (u["balance"] or 0.0) - amount
    new_total_bet = (u["total_bet_volume"] or 0.0) + amount
    db_execute("UPDATE users SET balance=?, total_bet_volume=? WHERE user_id=?", (new_balance, new_total_bet, user.id))

    # round_id = chatid_epoch
    now_ts = int(datetime.utcnow().timestamp())
    round_epoch = now_ts // ROUND_SECONDS
    round_id = f"{chat.id}_{round_epoch}"
    db_execute("INSERT INTO bets(chat_id, round_id, user_id, side, amount, timestamp) VALUES (?, ?, ?, ?, ?, ?)",
               (chat.id, round_id, user.id, side, amount, now_iso()))

    await msg.reply_text(f"ƒê√£ ƒë·∫∑t {side.upper()} {amount:,}‚Ç´ cho phi√™n hi·ªán t·∫°i. S·ªë d∆∞ c√≤n {int(new_balance):,}‚Ç´")

# -----------------------
# ADMIN HANDLERS
# -----------------------

async def addmoney_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("Ch·ªâ admin m·ªõi d√πng l·ªánh n√†y.")
        return
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("C√∫ ph√°p: /addmoney <user_id> <amount>")
        return
    try:
        uid = int(args[0])
        amt = float(args[1])
    except:
        await update.message.reply_text("Tham s·ªë kh√¥ng h·ª£p l·ªá.")
        return
    ensure_user(uid, "", "")
    u = get_user(uid)
    new_bal = (u["balance"] or 0.0) + amt
    new_deposited = (u["total_deposited"] or 0.0) + amt
    # Update DB and remove restriction if present
    db_execute("UPDATE users SET balance=?, total_deposited=?, restricted_onek=0 WHERE user_id=?", (new_bal, new_deposited, uid))
    await update.message.reply_text(f"ƒê√£ c·ªông {int(amt):,}‚Ç´ cho user {uid}. S·ªë d∆∞ hi·ªán: {int(new_bal):,}‚Ç´")
    try:
        await context.bot.send_message(chat_id=uid, text=f"B·∫°n v·ª´a ƒë∆∞·ª£c admin c·ªông {int(amt):,}‚Ç´. S·ªë d∆∞: {int(new_bal):,}‚Ç´")
    except Exception:
        pass

async def top10_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("Ch·ªâ admin.")
        return
    rows = db_query("SELECT user_id, best_streak FROM users ORDER BY best_streak DESC LIMIT 10")
    text = "Top 10 ng∆∞·ªùi c√≥ chu·ªói th·∫Øng d√†i nh·∫•t:\n"
    for i, r in enumerate(rows, start=1):
        text += f"{i}. {r['user_id']} ‚Äî {r['best_streak']} th·∫Øng li√™n ti·∫øp\n"
    await update.message.reply_text(text)

async def balances_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("Ch·ªâ admin.")
        return
    rows = db_query("SELECT user_id, balance FROM users ORDER BY balance DESC LIMIT 50")
    text = "Top balances:\n"
    for r in rows:
        text += f"- {r['user_id']}: {int(r['balance']):,}\n"
    await update.message.reply_text(text)

# admin force handlers: /KqTai /KqXiu /bettai /betxiu /tatbet
async def admin_force_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("Ch·ªâ admin.")
        return
    text = update.message.text.strip()
    cmd = text.split()[0].lower()
    args = context.args
    if not args:
        await update.message.reply_text("C√∫ ph√°p: /KqTai <chat_id> ho·∫∑c /bettai <chat_id> ...")
        return
    try:
        chat_id = int(args[0])
    except:
        await update.message.reply_text("chat_id kh√¥ng h·ª£p l·ªá.")
        return
    if cmd == "/kqtai":
        db_execute("UPDATE groups SET bet_mode=? WHERE chat_id=?", ("force_tai", chat_id))
        await update.message.reply_text(f"ƒê√£ ƒë·∫∑t force T√ÄI cho nh√≥m {chat_id}. (Kh√¥ng th√¥ng b√°o v√†o nh√≥m)")
    elif cmd == "/kqxiu":
        db_execute("UPDATE groups SET bet_mode=? WHERE chat_id=?", ("force_xiu", chat_id))
        await update.message.reply_text(f"ƒê√£ ƒë·∫∑t force X·ªàU cho nh√≥m {chat_id}. (Kh√¥ng th√¥ng b√°o v√†o nh√≥m)")
    elif cmd == "/bettai":
        db_execute("UPDATE groups SET bet_mode=? WHERE chat_id=?", ("bettai", chat_id))
        await update.message.reply_text(f"ƒê√£ b·∫≠t c·∫ßu b·ªát T√ÄI cho nh√≥m {chat_id}.")
    elif cmd == "/betxiu":
        db_execute("UPDATE groups SET bet_mode=? WHERE chat_id=?", ("betxiu", chat_id))
        await update.message.reply_text(f"ƒê√£ b·∫≠t c·∫ßu b·ªát X·ªàU cho nh√≥m {chat_id}.")
    elif cmd == "/tatbet":
        db_execute("UPDATE groups SET bet_mode=? WHERE chat_id=?", ("random", chat_id))
        await update.message.reply_text(f"ƒê√£ t·∫Øt c·∫ßu b·ªát v√† tr·∫£ v·ªÅ random cho nh√≥m {chat_id}.")
    else:
        await update.message.reply_text("L·ªánh admin kh√¥ng h·ª£p l·ªá.")

# -----------------------
# GROUP / BATDAU / APPROVAL
# -----------------------

async def batdau_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if chat.type not in ("group", "supergroup"):
        await update.message.reply_text("/batdau ch·ªâ d√πng trong nh√≥m.")
        return
    title = chat.title or ""
    rows = db_query("SELECT chat_id FROM groups WHERE chat_id=?", (chat.id,))
    if not rows:
        db_execute("INSERT INTO groups(chat_id, title, approved, running, bet_mode, last_round) VALUES (?, ?, 0, 0, 'random', ?)",
                   (chat.id, title, 0))
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("Duy·ªát", callback_data=f"approve|{chat.id}"),
         InlineKeyboardButton("T·ª´ ch·ªëi", callback_data=f"deny|{chat.id}")]
    ])
    text = f"Y√™u c·∫ßu b·∫≠t bot cho nh√≥m:\n{title}\nchat_id: {chat.id}\nNg∆∞·ªùi y√™u c·∫ßu: {update.effective_user.id}"
    for aid in ADMIN_IDS:
        try:
            await context.bot.send_message(chat_id=aid, text=text, reply_markup=kb)
        except Exception:
            logger.exception(f"Kh√¥ng g·ª≠i ƒë∆∞·ª£c y√™u c·∫ßu duy·ªát nh√≥m t·ªõi admin {aid}")
    await update.message.reply_text("ƒê√£ g·ª≠i y√™u c·∫ßu t·ªõi admin ƒë·ªÉ duy·ªát.")

async def approve_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    parts = data.split("|")
    if len(parts) != 2:
        await query.edit_message_text("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.")
        return
    action, chat_id_s = parts
    try:
        chat_id = int(chat_id_s)
    except:
        await query.edit_message_text("chat_id kh√¥ng h·ª£p l·ªá.")
        return
    if query.from_user.id not in ADMIN_IDS:
        await query.edit_message_text("Ch·ªâ admin m·ªõi thao t√°c.")
        return
    if action == "approve":
        db_execute("UPDATE groups SET approved=1, running=1 WHERE chat_id=?", (chat_id,))
        await query.edit_message_text(f"ƒê√£ duy·ªát v√† b·∫≠t ch·∫°y cho nh√≥m {chat_id}.")
        try:
            await context.bot.send_message(chat_id=chat_id, text="Bot ƒë√£ ƒë∆∞·ª£c admin duy·ªát ‚Äî b·∫Øt ƒë·∫ßu ch·∫°y phi√™n m·ªói 60s. G√µ /batdau ƒë·ªÉ y√™u c·∫ßu ch·∫°y l·∫°i.")
        except Exception:
            pass
    else:
        db_execute("UPDATE groups SET approved=0, running=0 WHERE chat_id=?", (chat_id,))
        await query.edit_message_text(f"ƒê√£ t·ª´ ch·ªëi cho nh√≥m {chat_id}.")

def get_active_groups() -> List[Dict[str, Any]]:
    rows = db_query("SELECT chat_id, bet_mode, last_round FROM groups WHERE approved=1 AND running=1")
    return [dict(r) for r in rows]

# ===================== NG∆Ø·ªúI D√ôNG NH·∫¨P CODE =====================
user_bonus_history = {}  # {user_id: set(code)}

async def redeem_code_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        code = context.args[0].upper()
    except IndexError:
        await update.message.reply_text("‚ö†Ô∏è C√∫ ph√°p: /nhancode <CODE>")
        return

    if code not in promo_codes:
        await update.message.reply_text("‚ùå Code kh√¥ng t·ªìn t·∫°i.")
        return

    if promo_codes[code]["used"]:
        await update.message.reply_text("‚ùå Code n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.")
        return

    # Ki·ªÉm tra n·∫øu user ƒë√£ nh·∫≠p code n√†y tr∆∞·ªõc ƒë√≥
    if user_id in user_bonus_history and code in user_bonus_history[user_id]:
        await update.message.reply_text("‚ö†Ô∏è B·∫°n ƒë√£ nh·∫≠p code n√†y r·ªìi.")
        return

    # C·ªông ti·ªÅn v√†o t√†i kho·∫£n user
    amount = promo_codes[code]["amount"]
    wager_required = promo_codes[code]["wager_required"]
    update_user_balance(user_id, amount)  # h√†m b·∫°n ƒë√£ c√≥ s·∫µn ƒë·ªÉ c·ªông ti·ªÅn

    promo_codes[code]["used"] = True
    user_bonus_history.setdefault(user_id, set()).add(code)

    await update.message.reply_text(
        f"üéÅ B·∫°n ƒë√£ nh·∫≠n {amount:,}ƒë th√†nh c√¥ng!\n"
        f"üîÑ V√≤ng c∆∞·ª£c y√™u c·∫ßu: {wager_required} v√≤ng.\nCh√∫c b·∫°n may m·∫Øn üçÄ"
    )

# -----------------------
# ROUND ENGINE
# -----------------------

async def rounds_loop(app: Application):
    logger.info("Rounds loop starting...")
    # wait a little for startup
    await asyncio.sleep(2)
    while True:
        try:
            groups = get_active_groups()
            if groups:
                logger.debug(f"Active groups: {[g['chat_id'] for g in groups]}")
            tasks = []
            for g in groups:
                chat_id = g['chat_id']
                tasks.append(asyncio.create_task(run_round_for_group(app, chat_id)))
            if tasks:
                await asyncio.gather(*tasks, return_exceptions=True)
        except Exception as e:
            logger.exception("Exception in rounds_loop")
            for aid in ADMIN_IDS:
                try:
                    await app.bot.send_message(chat_id=aid, text=f"ERROR - rounds_loop exception:\n{e}")
                except Exception:
                    pass
        await asyncio.sleep(ROUND_SECONDS)

# Helper: format history row up to MAX_HISTORY
def format_history_line(chat_id: int) -> str:
    rows = db_query("SELECT result FROM history WHERE chat_id=? ORDER BY id DESC LIMIT ?", (chat_id, MAX_HISTORY))
    # rows are recent first; we want left-to-right oldest -> newest, so reverse
    results = [r["result"] for r in reversed(rows)]
    mapped = []
    for r in results:
        if r == "tai":
            mapped.append(BLACK)
        elif r == "xiu":
            mapped.append(WHITE)
    return " ".join(mapped)

# main per-group round runner
async def run_round_for_group(app: Application, chat_id: int):
    """
    For each active group, do:
    - identify current round_id (epoch)
    - gather bets placed for this round
    - determine bet_mode and possibly force result
    - send 3 dice one-by-one (1s apart), show emoji for each
    - compute payouts, update balances & pot
    - persist history and send summary + history line
    """
    try:
        now_ts = int(datetime.utcnow().timestamp())
        round_epoch = now_ts // ROUND_SECONDS
        round_index = round_epoch
        round_id = f"{chat_id}_{round_epoch}"

        # fetch bets for this round
        bets_rows = db_query("SELECT user_id, side, amount FROM bets WHERE chat_id=? AND round_id=?", (chat_id, round_id))
        bets = [dict(r) for r in bets_rows]

        # get group bet_mode
        grows = db_query("SELECT bet_mode FROM groups WHERE chat_id=?", (chat_id,))
        bet_mode = grows[0]["bet_mode"] if grows else "random"

        # decide forced/bettai/betxiu
        forced_value = None
        if bet_mode == "force_tai":
            forced_value = "tai"
            # revert after applying once
            db_execute("UPDATE groups SET bet_mode='random' WHERE chat_id=?", (chat_id,))
        elif bet_mode == "force_xiu":
            forced_value = "xiu"
            db_execute("UPDATE groups SET bet_mode='random' WHERE chat_id=?", (chat_id,))
        elif bet_mode == "bettai":
            forced_value = "tai"
        elif bet_mode == "betxiu":
            forced_value = "xiu"

        # send initial rolling message
        try:
            await app.bot.send_message(chat_id=chat_id, text=f"üé≤ Phi√™n {round_index} ‚Äî ƒêang tung x√∫c x·∫Øc...")
        except Exception:
            pass

        # roll dice one-by-one with small delay
        dice = []
        special = None
        if forced_value:
            # generate until meet forced_value (bounded attempts)
            attempts = 0
            dice, total, special = roll_three_dice_random()
            while result_from_total(total) != forced_value and attempts < 50:
                dice, total, special = roll_three_dice_random()
                attempts += 1
        else:
            # normal roll: generate sequentially
            a = roll_one_die()
            dice.append(a)
            try:
                await app.bot.send_message(chat_id=chat_id, text=f"{DICE_CHARS[a-1]}")  # send first die
            except Exception:
                pass
            await asyncio.sleep(1)

            b = roll_one_die()
            dice.append(b)
            try:
                await app.bot.send_message(chat_id=chat_id, text=f"{DICE_CHARS[b-1]}")
            except Exception:
                pass
            await asyncio.sleep(1)

            c = roll_one_die()
            dice.append(c)
            try:
                await app.bot.send_message(chat_id=chat_id, text=f"{DICE_CHARS[c-1]}")
            except Exception:
                pass

            total = sum(dice)
            if dice.count(1) == 3:
                special = "triple1"
            elif dice.count(6) == 3:
                special = "triple6"

        # If forced_value case: we didn't send step-by-step above; send step-by-step for forced as well
        if forced_value:
            # send each die individually with 1s gap
            # reconstruct dice variable already set
            for val in dice:
                try:
                    await app.bot.send_message(chat_id=chat_id, text=f"{DICE_CHARS[val-1]}")
                except Exception:
                    pass
                await asyncio.sleep(1)
            total = sum(dice)

        result = result_from_total(total)

        # persist history
        dice_str = ",".join(map(str, dice))
        db_execute("INSERT INTO history(chat_id, round_index, round_id, result, dice, timestamp) VALUES (?, ?, ?, ?, ?, ?)",
                   (chat_id, round_index, round_id, result, dice_str, now_iso()))

        # compute winners/losers
        winners = []
        losers = []
        total_winner_bets = 0.0
        total_loser_bets = 0.0
        for b in bets:
            if b["side"] == result:
                winners.append((b["user_id"], b["amount"]))
                total_winner_bets += b["amount"]
            else:
                losers.append((b["user_id"], b["amount"]))
                total_loser_bets += b["amount"]

        # losers go to pot
        if total_loser_bets > 0:
            add_to_pot(total_loser_bets)

        winners_paid = []
        for uid, amt in winners:
            # house share to pot (3% of amt)
            house_share = amt * HOUSE_RATE
            add_to_pot(house_share)
            payout = amt * WIN_MULTIPLIER
            ensure_user(uid, "", "")
            u = get_user(uid)
            new_balance = (u["balance"] or 0.0) + payout
            cur_streak = (u["current_streak"] or 0) + 1
            best_streak = max(u["best_streak"] or 0, cur_streak)
            db_execute("UPDATE users SET balance=?, current_streak=?, best_streak=? WHERE user_id=?", (new_balance, cur_streak, best_streak, uid))
            winners_paid.append((uid, payout, amt))

        for uid, amt in losers:
            rows = db_query("SELECT current_streak FROM users WHERE user_id=?", (uid,))
            if rows:
                db_execute("UPDATE users SET current_streak=0 WHERE user_id=?", (uid,))

        # special triple -> distribute entire pot to winners proportionally
        special_msg = ""
        if special in ("triple1", "triple6"):
            pot_amount = get_pot_amount()
            if pot_amount > 0 and winners:
                total_bets_win = sum([amt for (_, amt) in winners])
                if total_bets_win > 0:
                    distributed = []
                    for uid, amt in winners:
                        share = (amt / total_bets_win) * pot_amount
                        ensure_user(uid, "", "")
                        u = get_user(uid)
                        db_execute("UPDATE users SET balance=? WHERE user_id=?", ((u["balance"] or 0.0) + share, uid))
                        distributed.append((uid, share))
                    special_msg = f"H≈© {int(pot_amount):,}‚Ç´ ƒë√£ ƒë∆∞·ª£c chia cho ng∆∞·ªùi th·∫Øng theo t·ª∑ l·ªá c∆∞·ª£c!"
                    reset_pot()

        # clear bets for this round
        db_execute("DELETE FROM bets WHERE chat_id=? AND round_id=?", (chat_id, round_id))

        # prepare display message
        display = "T√†i" if result == "tai" else "X·ªâu"
        symbol = BLACK if result == "tai" else WHITE
        history_line = format_history_line(chat_id)

        msg = f"‚ñ∂Ô∏è Phi√™n {round_index} ‚Äî K·∫øt qu·∫£: {display} {symbol}\n"
        msg += f"X√∫c x·∫Øc: {' '.join([DICE_CHARS[d-1] for d in dice])} ‚Äî T·ªïng: {total}\n"
        if special_msg:
            msg += f"\n{special_msg}\n"
        if history_line:
            msg += f"\nL·ªãch s·ª≠ ({MAX_HISTORY} g·∫ßn nh·∫•t):\n{history_line}\n"

        try:
            await app.bot.send_message(chat_id=chat_id, text=msg)
        except Exception:
            logger.exception("Cannot send round result to group")

        # send admin summary optionally
        if winners_paid:
            admin_summary = f"Round {round_index} in group {chat_id} completed.\nResult: {result}\nWinners:\n"
            for uid, payout, amt in winners_paid:
                admin_summary += f"- {uid}: ƒë·∫∑t {int(amt):,} -> nh·∫≠n {int(payout):,}\n"
            for aid in ADMIN_IDS:
                try:
                    await app.bot.send_message(chat_id=aid, text=admin_summary)
                except Exception:
                    pass

    except Exception as e:
        logger.exception("Exception in run_round_for_group")
        for aid in ADMIN_IDS:
            try:
                await app.bot.send_message(chat_id=aid, text=f"ERROR - run_round_for_group exception for group {chat_id}: {e}\n{traceback.format_exc()}")
            except Exception:
                pass

# -----------------------
# STARTUP / SHUTDOWN / EXCEPTIONS
# -----------------------

async def on_startup(app: Application):
    logger.info("Bot starting up...")
    init_db()
    # small delay so loop ready
    await asyncio.sleep(1)
    # schedule rounds loop
    loop = asyncio.get_running_loop()
    loop.create_task(rounds_loop(app))
    # notify admins
    for aid in ADMIN_IDS:
        try:
            await app.bot.send_message(chat_id=aid, text="‚úÖ Bot ƒë√£ kh·ªüi ƒë·ªông v√† s·∫µn s√†ng.")
        except Exception:
            pass

async def on_shutdown(app: Application):
    logger.info("Bot shutting down...")
    for aid in ADMIN_IDS:
        try:
            await app.bot.send_message(chat_id=aid, text="‚ö†Ô∏è Bot ƒëang t·∫Øt (shutdown).")
        except Exception:
            pass

def handle_loop_exception(loop, context):
    msg = context.get("exception", context.get("message"))
    logger.error(f"Caught exception in event loop: {msg}")

# -----------------------
# MAIN
# -----------------------

def main():
    if not BOT_TOKEN or BOT_TOKEN == "PUT_YOUR_BOT_TOKEN_HERE":
        print("ERROR: BOT_TOKEN not set.")
        return

    init_db()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # Register handlers
    app.add_handler(CommandHandler("start", start_handler))
    app.add_handler(CommandHandler("game", game_info))
    app.add_handler(CommandHandler("nap", nap_info))
    app.add_handler(CommandHandler("ruttien", ruttien_handler))
    app.add_handler(CallbackQueryHandler(withdraw_callback_handler, pattern=r"^withdraw_.*|^withdraw.*"))

    app.add_handler(CommandHandler("addmoney", addmoney_handler))
    app.add_handler(CommandHandler("top10", top10_handler))
    app.add_handler(CommandHandler("balances", balances_handler))
    app.add_handler(CommandHandler("KqTai", admin_force_handler))
    app.add_handler(CommandHandler("KqXiu", admin_force_handler))
    app.add_handler(CommandHandler("bettai", admin_force_handler))
    app.add_handler(CommandHandler("betxiu", admin_force_handler))
    app.add_handler(CommandHandler("tatbet", admin_force_handler))
    app.add_handler(CommandHandler("code", admin_create_code_handler))
    app.add_handler(CommandHandler("nhancode", redeem_code_handler))
    
    app.add_handler(CommandHandler("batdau", batdau_handler))
    app.add_handler(CallbackQueryHandler(approve_callback_handler, pattern=r"^(approve|deny)\|"))

    app.add_handler(MessageHandler(filters.Regex(r"^/[TtXx]\d+"), bet_message_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, menu_text_handler))

    # lifecycle hooks
    app.post_init = on_startup
    app.post_shutdown = on_shutdown

    # event loop exception
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.set_exception_handler(handle_loop_exception)

    try:
        logger.info("Running bot (polling)...")
        app.run_polling(poll_interval=1.0)
    except Exception as e:
        logger.exception(f"Fatal error running the bot: {e}")
        for aid in ADMIN_IDS:
            try:
                app.bot.send_message(chat_id=aid, text=f"Bot crashed on startup: {e}")
            except Exception:
                pass

if __name__ == "__main__":
    main() 
