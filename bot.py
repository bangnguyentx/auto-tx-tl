# bot.py
# Telegram T√†i X·ªâu Bot ‚Äî Ho√†n ch·ªânh, nhi·ªÅu ch√∫ gi·∫£i, ph√π h·ª£p deploy Render (worker)
# - Phi√™n: 60 gi√¢y
# - L∆∞u: SQLite
# - Admins: c√≥ quy·ªÅn duy·ªát nh√≥m, √©p k·∫øt qu·∫£, b·∫≠t/t·∫Øt c·∫ßu b·ªát, add ti·ªÅn, x·ª≠ l√Ω r√∫t ti·ªÅn
# - Ng∆∞·ªùi ch∆°i: /start (t·∫∑ng 10k), /T1000 /X500, /ruttien ...
# -------------------------------------------------------------
# IMPORTANT: Replace BOT_TOKEN below with your bot token before running.
# DO NOT upload your token to public repos. Use environment variables in production.
# -------------------------------------------------------------

import asyncio
import logging
import threading
import http.server
import socketserver

from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

# üìå FAKE PORT ƒê·ªÇ RENDER KH√îNG KILL
def keep_port_open():
    PORT = 10000
    Handler = http.server.SimpleHTTPRequestHandler
    with socketserver.TCPServer(("", PORT), Handler) as httpd:
        httpd.serve_forever()

threading.Thread(target=keep_port_open, daemon=True).start()   # Token th·∫≠t c·ªßa b·∫°n

# C√°c h√†m nh∆∞ init_db(), on_startup(), handler... n·∫±m d∆∞·ªõi ƒë√¢y
import os
import sys
import sqlite3
import random
import math
import traceback
import logging
import asyncio
from datetime import datetime, timedelta
from typing import List, Tuple, Optional, Dict, Any

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup,
    KeyboardButton, Chat, ChatPermissions
)
from telegram.ext import (
    ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler,
    filters, Application, PicklePersistence
)

# -----------------------
# CONFIGURATION
# -----------------------

# *** SECURITY: Put your token here BEFORE running, or better use environment variable.
# Replace the string below with your actual token, or set BOT_TOKEN env variable and leave this placeholder.
BOT_TOKEN = os.environ.get("BOT_TOKEN", "PUT_YOUR_BOT_TOKEN_HERE")

# Admin IDs (list) - you can update these IDs. These are the accounts that receive approval requests, crash alerts, and can use admin commands.
ADMIN_IDS = [7760459637, 6942793864]  # <-- adjust if needed

# Round timing (seconds)
ROUND_SECONDS = 60  # user requested 60s per round

# Minimal bet
MIN_BET = 1000  # 1,000‚Ç´ minimal bet as you requested

# Initial free credit for new users on /start
INITIAL_FREE = 10_000

# Winning payout multiplier and house share
WIN_MULTIPLIER = 1.97
HOUSE_RATE = 0.03  # 3% of winning goes to pot

# DB filename
DB_FILE = "tx_bot_data.db"

# Logging config
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Safety: prevent running with placeholder token
if BOT_TOKEN == "PUT_YOUR_BOT_TOKEN_HERE":
    logger.warning("BOT_TOKEN placeholder detected. Replace it with your actual token or set BOT_TOKEN env var before running.")
    # Not exiting ‚Äî allow user to edit file locally. If running on server, will likely fail auth.

# -----------------------
# DATABASE SETUP
# -----------------------

def get_db_connection():
    conn = sqlite3.connect(DB_FILE, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = get_db_connection()
    cur = conn.cursor()
    # users: track balance, streaks, totals
    cur.executescript("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        balance REAL DEFAULT 0,
        total_deposited REAL DEFAULT 0,
        total_bet_volume REAL DEFAULT 0,
        current_streak INTEGER DEFAULT 0,
        best_streak INTEGER DEFAULT 0,
        created_at TEXT
    );
    CREATE TABLE IF NOT EXISTS groups (
        chat_id INTEGER PRIMARY KEY,
        title TEXT,
        approved INTEGER DEFAULT 0,
        running INTEGER DEFAULT 0,
        bet_mode TEXT DEFAULT 'random', -- 'random', 'bettai', 'betxiu', 'force_tai', 'force_xiu'
        last_round INTEGER DEFAULT 0
    );
    CREATE TABLE IF NOT EXISTS bets (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        chat_id INTEGER,
        round_id TEXT,
        user_id INTEGER,
        side TEXT, -- 'tai' or 'xiu'
        amount REAL,
        timestamp TEXT
    );
    CREATE TABLE IF NOT EXISTS history (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        chat_id INTEGER,
        round_index INTEGER,
        round_id TEXT,
        result TEXT,
        dice TEXT,
        timestamp TEXT
    );
    CREATE TABLE IF NOT EXISTS pot (
        id INTEGER PRIMARY KEY CHECK (id=1),
        amount REAL DEFAULT 0
    );
    """)
    # ensure pot row exists
    cur.execute("INSERT OR IGNORE INTO pot(id, amount) VALUES (1, 0)")
    conn.commit()
    conn.close()

# Helper DB functions
def db_execute(query: str, params: Tuple = ()):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute(query, params)
    conn.commit()
    lastrowid = cur.lastrowid
    conn.close()
    return lastrowid

def db_query(query: str, params: Tuple = ()):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute(query, params)
    rows = cur.fetchall()
    conn.close()
    return rows

# -----------------------
# UTILITIES
# -----------------------

def now_iso():
    return datetime.utcnow().isoformat()

def ensure_user(user_id: int, username: str = "", first_name: str = ""):
    rows = db_query("SELECT user_id FROM users WHERE user_id=?", (user_id,))
    if not rows:
        db_execute(
            "INSERT INTO users(user_id, username, first_name, balance, total_deposited, total_bet_volume, current_streak, best_streak, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)",
            (user_id, username or "", first_name or "", 0.0, 0.0, 0.0, 0, 0, now_iso())
        )

def get_user(user_id: int) -> Optional[Dict[str, Any]]:
    rows = db_query("SELECT * FROM users WHERE user_id=?", (user_id,))
    return dict(rows[0]) if rows else None

def add_balance(user_id: int, amount: float):
    u = get_user(user_id)
    if not u:
        ensure_user(user_id, "", "")
        u = get_user(user_id)
    new_bal = (u["balance"] or 0.0) + amount
    db_execute("UPDATE users SET balance=? WHERE user_id=?", (new_bal, user_id))

def set_balance(user_id: int, amount: float):
    ensure_user(user_id, "", "")
    db_execute("UPDATE users SET balance=? WHERE user_id=?", (amount, user_id))

def add_to_pot(amount: float):
    rows = db_query("SELECT amount FROM pot WHERE id=1")
    current = rows[0]["amount"] if rows else 0.0
    new = current + amount
    db_execute("UPDATE pot SET amount=? WHERE id=1", (new,))

def get_pot_amount() -> float:
    rows = db_query("SELECT amount FROM pot WHERE id=1")
    return rows[0]["amount"] if rows else 0.0

def reset_pot():
    db_execute("UPDATE pot SET amount=? WHERE id=1", (0.0,))

def send_admins(app: Application, text: str, reply_markup=None):
    for aid in ADMIN_IDS:
        try:
            app.bot.send_message(chat_id=aid, text=text, reply_markup=reply_markup)
        except Exception as e:
            logger.exception(f"Failed to notify admin {aid}: {e}")

# -----------------------
# DICE LOGIC
# -----------------------

def roll_three_dice() -> Tuple[List[int], int, Optional[str]]:
    # Returns (dice_list, total, special_flag)
    # special_flag: 'triple1' or 'triple6' or None
    a = random.randint(1, 6)
    b = random.randint(1, 6)
    c = random.randint(1, 6)
    dice = [a, b, c]
    total = sum(dice)
    if dice.count(1) == 3:
        special = 'triple1'
    elif dice.count(6) == 3:
        special = 'triple6'
    else:
        special = None
    return dice, total, special

def result_from_total(total: int) -> str:
    # T√†i: 11-17 ; X·ªâu: 4-10
    if 11 <= total <= 17:
        return 'tai'
    elif 4 <= total <= 10:
        return 'xiu'
    else:
        return 'invalid'

# -----------------------
# TELEGRAM HANDLERS
# -----------------------

# Keyboard menu for private chats
MAIN_MENU = ReplyKeyboardMarkup(
    [
        [KeyboardButton("Game"), KeyboardButton("N·∫°p ti·ªÅn")],
        [KeyboardButton("R√∫t ti·ªÅn"), KeyboardButton("S·ªë d∆∞")]
    ],
    resize_keyboard=True
)

async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    ensure_user(user.id, user.username or "", user.first_name or "")
    u = get_user(user.id)
    greeted = False
    if u and (u["total_deposited"] == 0):
        # Give initial free credit and mark as deposited to avoid re-gifting
        add_balance(user.id, INITIAL_FREE)
        db_execute("UPDATE users SET total_deposited=? WHERE user_id=?", (INITIAL_FREE, user.id))
        greeted = True

    # Friendly welcome message and menu
    text = f"Xin ch√†o {user.first_name or 'b·∫°n'}! üëã\n\n"
    text += "Ch√†o m·ª´ng ƒë·∫øn v·ªõi bot T√†i X·ªâu t·ª± ƒë·ªông.\n"
    if greeted:
        text += f"B·∫°n ƒë√£ ƒë∆∞·ª£c t·∫∑ng {INITIAL_FREE:,}‚Ç´ mi·ªÖn ph√≠. Ch√∫c ch∆°i vui!\n\n"
    text += "Menu:\n"
    text += "- Game: th√¥ng tin & link nh√≥m\n"
    text += "- N·∫°p ti·ªÅn: h∆∞·ªõng d·∫´n n·∫°p\n"
    text += "- R√∫t ti·ªÅn: /ruttien <Ng√¢n h√†ng> <S·ªë TK> <S·ªë ti·ªÅn>\n"
    text += "- ƒê·∫∑t c∆∞·ª£c trong nh√≥m: /T<amount> ho·∫∑c /X<amount>\n"
    text += "\nB·∫°n c√≥ th·ªÉ d√πng ph√≠m menu ho·∫∑c l·ªánh tr·ª±c ti·∫øp."
    await update.message.reply_text(text, reply_markup=MAIN_MENU)

async def menu_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().lower()
    if text == "game":
        return await game_info(update, context)
    if text == "n·∫°p ti·ªÅn" or text == "nap tien" or text == "n·∫°p":
        return await nap_info(update, context)
    if text == "r√∫t ti·ªÅn" or text == "rut tien":
        return await ruttien_help(update, context)
    if text == "s·ªë d∆∞" or text == "so du":
        u = get_user(update.effective_user.id)
        bal = int(u["balance"]) if u else 0
        await update.message.reply_text(f"S·ªë d∆∞ hi·ªán t·∫°i: {bal:,}‚Ç´")
    # else ignore; catch other text elsewhere

async def game_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "Game: T√†i X·ªâu (x√∫c x·∫Øc 3 con)\n\n"
    text += "Lu·∫≠t ch√≠nh:\n"
    text += "- T√†i: t·ªïng 11-17 (ƒêen)\n- X·ªâu: t·ªïng 4-10 (Tr·∫Øng)\n"
    text += f"- Phi√™n ch·∫°y m·ªói {ROUND_SECONDS} gi√¢y khi nh√≥m ƒë∆∞·ª£c admin duy·ªát & b·∫≠t /batdau.\n"
    text += f"- Th·∫Øng nh·∫≠n x{WIN_MULTIPLIER} (house gi·ªØ {int(HOUSE_RATE*100)}% m·ªói kho·∫£n th·∫Øng v√†o h≈©).\n"
    text += "- N·∫øu ra 3 con 1 ho·∫∑c 3 con 6 ‚Üí h≈© ƒë∆∞·ª£c chia cho nh·ªØng ng∆∞·ªùi th·∫Øng phi√™n ƒë√≥ theo t·ªâ l·ªá c∆∞·ª£c.\n\n"
    text += "Link nh√≥m: @VET789cc\n"
    text += "Gi·ªõi thi·ªáu: ƒê·∫∑t c∆∞·ª£c b·∫±ng l·ªánh /T<amount> ho·∫∑c /X<amount> trong nh√≥m khi bot ƒëang ch·∫°y."
    await update.message.reply_text(text)

async def nap_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ƒê·ªÉ n·∫°p ti·ªÅn, li√™n h·ªá: @HOANGDUNGG789\nAdmin s·∫Ω ki·ªÉm tra v√† c·ªông ti·ªÅn th·ªß c√¥ng ho·∫∑c b·∫°n c√≥ th·ªÉ d√πng h·ªá th·ªëng n·∫°p (n·∫øu c√≥).")

async def ruttien_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "ƒê·ªÉ r√∫t ti·ªÅn h√£y nh·∫≠p l·ªánh:\n"
        "/ruttien <Ng√¢n h√†ng> <S·ªë t√†i kho·∫£n> <S·ªë ti·ªÅn>\n\n"
        "R√∫t t·ªëi thi·ªÉu 100000 vnƒë.\n"
        "B·∫°n ph·∫£i c∆∞·ª£c t·ªëi thi·ªÉu 0.9 v√≤ng c∆∞·ª£c (0.9x t·ªïng ƒë√£ n·∫°p).\n"
    )
    await update.message.reply_text(text)

# R√∫t ti·ªÅn command handler
async def ruttien_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    ensure_user(user.id, user.username or "", user.first_name or "")
    args = context.args
    if len(args) < 3:
        await update.message.reply_text("Sai c√∫ ph√°p. V√≠ d·ª•: /ruttien Vietcombank 0123456789 100000")
        return
    bank = args[0]
    account = args[1]
    try:
        amount = int(args[2])
    except:
        await update.message.reply_text("S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá.")
        return
    if amount < 100000:
        await update.message.reply_text("R√∫t t·ªëi thi·ªÉu 100000 vnƒë.")
        return
    # check betting requirement
    u = get_user(user.id)
    if not u:
        await update.message.reply_text("Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n.")
        return
    total_deposited = u["total_deposited"] or 0.0
    total_bet_volume = u["total_bet_volume"] or 0.0
    required = 0.9 * total_deposited
    if total_deposited > 0 and total_bet_volume < required:
        await update.message.reply_text(f"B·∫°n ch∆∞a c∆∞·ª£c ƒë·ªß. C·∫ßn c∆∞·ª£c t·ªëi thi·ªÉu {required:,.0f} (ƒë√£ c∆∞·ª£c {total_bet_volume:,.0f}).")
        return
    if amount > u["balance"]:
        await update.message.reply_text("S·ªë d∆∞ kh√¥ng ƒë·ªß.")
        return

    # Send request to admin with approve/deny inline buttons
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("Th√†nh c√¥ng", callback_data=f"withdraw_ok|{user.id}|{amount}|{bank}|{account}"),
         InlineKeyboardButton("T·ª´ ch·ªëi", callback_data=f"withdraw_no|{user.id}|{amount}|{bank}|{account}")]
    ])
    # Inform user
    await update.message.reply_text("Vui l√≤ng ch·ªù, n·∫øu sau 1 ti·∫øng ch∆∞a th·∫•y th√¥ng b√°o Th√†nh c√¥ng/T·ª´ ch·ªëi th√¨ nh·∫Øn admin nh√©!")
    # Notify all admins
    text = f"Y√äU C·∫¶U R√öT TI·ªÄN\nUser: @{user.username or user.first_name} (id: {user.id})\nBank: {bank}\nAccount: {account}\nAmount: {amount:,}‚Ç´"
    for aid in ADMIN_IDS:
        try:
            await context.bot.send_message(chat_id=aid, text=text, reply_markup=kb)
        except Exception:
            logger.exception(f"Cannot notify admin {aid} for withdraw request")

async def withdraw_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    # pattern: withdraw_ok|user_id|amount|bank|account  OR withdraw_no|...
    parts = data.split("|")
    action = parts[0]
    try:
        user_id = int(parts[1])
        amount = int(parts[2])
        bank = parts[3]
        account = parts[4]
    except Exception:
        await query.edit_message_text("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.")
        return

    # Only admins can press these
    if query.from_user.id not in ADMIN_IDS:
        await query.edit_message_text("Ch·ªâ admin m·ªõi thao t√°c.")
        return

    if action == "withdraw_ok":
        # Deduct amount and notify user
        u = get_user(user_id)
        if not u:
            await query.edit_message_text("User kh√¥ng t·ªìn t·∫°i.")
            return
        if u["balance"] < amount:
            await query.edit_message_text("User kh√¥ng ƒë·ªß ti·ªÅn.")
            try:
                await context.bot.send_message(chat_id=user_id, text=f"Y√™u c·∫ßu r√∫t {amount:,}‚Ç´ b·ªã t·ª´ ch·ªëi: s·ªë d∆∞ kh√¥ng ƒë·ªß.")
            except:
                pass
            return
        new_bal = u["balance"] - amount
        db_execute("UPDATE users SET balance=? WHERE user_id=?", (new_bal, user_id))
        await query.edit_message_text(f"ƒê√£ x√°c nh·∫≠n r√∫t {amount:,}‚Ç´ cho user {user_id}.")
        try:
            await context.bot.send_message(chat_id=user_id, text=f"Y√™u c·∫ßu r√∫t {amount:,}‚Ç´ ƒë√£ ƒë∆∞·ª£c duy·ªát b·ªüi admin. Vui l√≤ng ch·ªù chuy·ªÉn kho·∫£n.")
        except:
            pass
    else:
        await query.edit_message_text(f"Y√™u c·∫ßu r√∫t {amount:,}‚Ç´ ƒë√£ b·ªã t·ª´ ch·ªëi b·ªüi admin {query.from_user.id}.")
        try:
            await context.bot.send_message(chat_id=user_id, text=f"Y√™u c·∫ßu r√∫t {amount:,}‚Ç´ ƒë√£ b·ªã t·ª´ ch·ªëi b·ªüi admin. Vui l√≤ng li√™n h·ªá.")
        except:
            pass

# Betting message in groups or private: /T1000 or /X500
async def bet_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    text = msg.text.strip()
    user = update.effective_user
    chat = update.effective_chat
    # accept patterns like /T1000 or /t1000 or /X500
    if not text.startswith("/"):
        return
    cmd = text[1:]
    if len(cmd) < 2:
        return
    prefix = cmd[0].lower()
    if prefix not in ('t', 'x'):
        return
    side = 'tai' if prefix == 't' else 'xiu'
    # parse amount
    try:
        amount = int(cmd[1:])
    except:
        await msg.reply_text("C√∫ ph√°p ƒë·∫∑t c∆∞·ª£c sai. V√≠ d·ª•: /T1000 ho·∫∑c /X5000")
        return
    if amount < MIN_BET:
        await msg.reply_text(f"ƒê·∫∑t c∆∞·ª£c t·ªëi thi·ªÉu {MIN_BET:,}‚Ç´")
        return

    # If in group, check group approved and running
    if chat.type in ("group", "supergroup"):
        g = db_query("SELECT approved, running FROM groups WHERE chat_id=?", (chat.id,))
        if not g or g[0]["approved"] != 1 or g[0]["running"] != 1:
            await msg.reply_text("Nh√≥m n√†y ch∆∞a ƒë∆∞·ª£c admin duy·ªát ho·∫∑c ch∆∞a b·∫≠t /batdau.")
            return

    # ensure user and check balance
    ensure_user(user.id, user.username or "", user.first_name or "")
    u = get_user(user.id)
    if u["balance"] < amount:
        await msg.reply_text("S·ªë d∆∞ kh√¥ng ƒë·ªß.")
        return

    # Deduct immediately, store bet
    new_balance = u["balance"] - amount
    new_total_bet = (u["total_bet_volume"] or 0.0) + amount
    db_execute("UPDATE users SET balance=?, total_bet_volume=? WHERE user_id=?", (new_balance, new_total_bet, user.id))

    # round_id strategy: use integer floor of timestamp / ROUND_SECONDS as epoch round
    now_ts = int(datetime.utcnow().timestamp())
    round_epoch = now_ts // ROUND_SECONDS
    round_id = f"{chat.id}_{round_epoch}"
    db_execute("INSERT INTO bets(chat_id, round_id, user_id, side, amount, timestamp) VALUES (?, ?, ?, ?, ?, ?)",
               (chat.id, round_id, user.id, side, amount, now_iso()))

    await msg.reply_text(f"ƒê√£ ƒë·∫∑t {side.upper()} {amount:,}‚Ç´ cho phi√™n hi·ªán t·∫°i.")

# Admin /addmoney
async def addmoney_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("Ch·ªâ admin m·ªõi d√πng l·ªánh n√†y.")
        return
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("C√∫ ph√°p: /addmoney <user_id> <amount>")
        return
    try:
        uid = int(args[0])
        amt = float(args[1])
    except:
        await update.message.reply_text("Tham s·ªë kh√¥ng h·ª£p l·ªá.")
        return
    ensure_user(uid, "", "")
    u = get_user(uid)
    new_bal = (u["balance"] or 0.0) + amt
    new_deposited = (u["total_deposited"] or 0.0) + amt
    db_execute("UPDATE users SET balance=?, total_deposited=? WHERE user_id=?", (new_bal, new_deposited, uid))
    await update.message.reply_text(f"ƒê√£ c·ªông {amt:,.0f}‚Ç´ cho user {uid}.")

# Admin top10 by best streak
async def top10_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("Ch·ªâ admin.")
        return
    rows = db_query("SELECT user_id, best_streak FROM users ORDER BY best_streak DESC LIMIT 10")
    text = "Top 10 ng∆∞·ªùi c√≥ chu·ªói th·∫Øng d√†i nh·∫•t:\n"
    for i, r in enumerate(rows, start=1):
        text += f"{i}. {r['user_id']} ‚Äî {r['best_streak']} th·∫Øng li√™n ti·∫øp\n"
    await update.message.reply_text(text)

# Admin balance dump (debug)
async def balances_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("Ch·ªâ admin.")
        return
    rows = db_query("SELECT user_id, balance FROM users ORDER BY balance DESC LIMIT 50")
    text = "Top balances:\n"
    for r in rows:
        text += f"- {r['user_id']}: {r['balance']:,.0f}\n"
    await update.message.reply_text(text)

# Admin commands to set result or bet mode:
# /KqTai <chat_id>  => one-shot force to tai (the DB stores 'force_tai' and reverts after one round)
# /KqXiu <chat_id>
# /bettai <chat_id> => continuous bet b·ªát (always result TAI)
# /betxiu <chat_id>
# /tatbet <chat_id> => revert to random
async def admin_force_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("Ch·ªâ admin.")
        return
    text = update.message.text.strip()
    cmd = text.split()[0].lower()
    args = context.args
    if not args:
        await update.message.reply_text("C√∫ ph√°p: /KqTai <chat_id> ho·∫∑c /bettai <chat_id> ...")
        return
    try:
        chat_id = int(args[0])
    except:
        await update.message.reply_text("chat_id kh√¥ng h·ª£p l·ªá.")
        return

    if cmd == "/kqtai":
        db_execute("UPDATE groups SET bet_mode=? WHERE chat_id=?", ("force_tai", chat_id))
        await update.message.reply_text(f"ƒê√£ ƒë·∫∑t force T√ÄI cho nh√≥m {chat_id}. (Kh√¥ng th√¥ng b√°o v√†o nh√≥m)")
    elif cmd == "/kqxiu":
        db_execute("UPDATE groups SET bet_mode=? WHERE chat_id=?", ("force_xiu", chat_id))
        await update.message.reply_text(f"ƒê√£ ƒë·∫∑t force X·ªàU cho nh√≥m {chat_id}. (Kh√¥ng th√¥ng b√°o v√†o nh√≥m)")
    elif cmd == "/bettai":
        db_execute("UPDATE groups SET bet_mode=? WHERE chat_id=?", ("bettai", chat_id))
        await update.message.reply_text(f"ƒê√£ b·∫≠t c·∫ßu b·ªát T√ÄI cho nh√≥m {chat_id}. (Kh√¥ng th√¥ng b√°o v√†o nh√≥m)")
    elif cmd == "/betxiu":
        db_execute("UPDATE groups SET bet_mode=? WHERE chat_id=?", ("betxiu", chat_id))
        await update.message.reply_text(f"ƒê√£ b·∫≠t c·∫ßu b·ªát X·ªàU cho nh√≥m {chat_id}. (Kh√¥ng th√¥ng b√°o v√†o nh√≥m)")
    elif cmd == "/tatbet":
        db_execute("UPDATE groups SET bet_mode=? WHERE chat_id=?", ("random", chat_id))
        await update.message.reply_text(f"ƒê√£ t·∫Øt c·∫ßu b·ªát v√† tr·∫£ v·ªÅ random cho nh√≥m {chat_id}.")
    else:
        await update.message.reply_text("L·ªánh admin kh√¥ng h·ª£p l·ªá.")

# Group command /batdau: request admin approve, after approve group can run rounds.
async def batdau_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if chat.type not in ("group", "supergroup"):
        await update.message.reply_text("/batdau ch·ªâ d√πng trong nh√≥m.")
        return
    title = chat.title or ""
    # ensure group stored
    rows = db_query("SELECT chat_id FROM groups WHERE chat_id=?", (chat.id,))
    if not rows:
        db_execute("INSERT INTO groups(chat_id, title, approved, running, bet_mode, last_round) VALUES (?, ?, 0, 0, 'random', ?)",
                   (chat.id, title, 0))
    # send approval request to admins
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("Duy·ªát", callback_data=f"approve|{chat.id}"),
         InlineKeyboardButton("T·ª´ ch·ªëi", callback_data=f"deny|{chat.id}")]
    ])
    text = f"Y√™u c·∫ßu b·∫≠t bot cho nh√≥m:\n{title}\nchat_id: {chat.id}\nNg∆∞·ªùi y√™u c·∫ßu: {update.effective_user.id}"
    # send to each admin
    for aid in ADMIN_IDS:
        try:
            await context.bot.send_message(chat_id=aid, text=text, reply_markup=kb)
        except Exception:
            logger.exception(f"Kh√¥ng g·ª≠i ƒë∆∞·ª£c y√™u c·∫ßu duy·ªát nh√≥m t·ªõi admin {aid}")
    await update.message.reply_text("ƒê√£ g·ª≠i y√™u c·∫ßu t·ªõi admin ƒë·ªÉ duy·ªát.")

# Callback for approve/deny
async def approve_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    parts = data.split("|")
    if len(parts) != 2:
        await query.edit_message_text("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.")
        return
    action, chat_id_s = parts
    try:
        chat_id = int(chat_id_s)
    except:
        await query.edit_message_text("chat_id kh√¥ng h·ª£p l·ªá.")
        return
    if query.from_user.id not in ADMIN_IDS:
        await query.edit_message_text("Ch·ªâ admin m·ªõi thao t√°c.")
        return
    if action == "approve":
        db_execute("UPDATE groups SET approved=1, running=1 WHERE chat_id=?", (chat_id,))
        await query.edit_message_text(f"ƒê√£ duy·ªát v√† b·∫≠t ch·∫°y cho nh√≥m {chat_id}.")
        # notify group
        try:
            await context.bot.send_message(chat_id=chat_id, text="Bot ƒë√£ ƒë∆∞·ª£c admin duy·ªát ‚Äî b·∫Øt ƒë·∫ßu ch·∫°y phi√™n m·ªói 60s. G√µ /batdau ƒë·ªÉ kh·ªüi ƒë·ªông l·∫°i n·∫øu c·∫ßn.")
        except Exception:
            pass
    else:
        db_execute("UPDATE groups SET approved=0, running=0 WHERE chat_id=?", (chat_id,))
        await query.edit_message_text(f"ƒê√£ t·ª´ ch·ªëi cho nh√≥m {chat_id}.")

# Helper: get groups that are approved and running
def get_active_groups() -> List[Dict[str, Any]]:
    rows = db_query("SELECT chat_id, bet_mode, last_round FROM groups WHERE approved=1 AND running=1")
    return [dict(r) for r in rows]

# -----------------------
# ROUND ENGINE
# -----------------------

# rounds_loop: background coroutine that launches run_round_for_group for each active group every ROUND_SECONDS
async def rounds_loop(app: Application):
    logger.info("Rounds loop starting...")
    # minimal initial delay to let bot boot
    await asyncio.sleep(2)
    while True:
        try:
            groups = get_active_groups()
            if groups:
                logger.debug(f"Active groups: {[g['chat_id'] for g in groups]}")
            tasks = []
            for g in groups:
                chat_id = g['chat_id']
                # Launch a task to run this group's current round.
                tasks.append(asyncio.create_task(run_round_for_group(app, chat_id)))
            # wait for all group tasks to finish (they should be quick) or time out
            if tasks:
                await asyncio.gather(*tasks, return_exceptions=True)
        except Exception as e:
            # Notify admins about the exception
            logger.exception("Exception in rounds_loop")
            for aid in ADMIN_IDS:
                try:
                    await app.bot.send_message(chat_id=aid, text=f"ERROR - rounds_loop exception:\n{e}")
                except Exception:
                    pass
        # Sleep until next tick; note that run_round_for_group uses round_id calculation by epoch of ROUND_SECONDS
        await asyncio.sleep(ROUND_SECONDS)

# run_round_for_group: does a single round's processing for the given group
async def run_round_for_group(app: Application, chat_id: int):
    """
    1) Determine current round_id (based on epoch)
    2) Read bets for this round
    3) Decide result (consider group.bet_mode for forced or bet b·ªát)
    4) Compute winners/losers, update balances & pot accordingly
    5) Handle special triple 1/6 -> distribute pot proportionally to winners
    6) Save history and send messages to group & admin
    """
    try:
        now_ts = int(datetime.utcnow().timestamp())
        round_epoch = now_ts // ROUND_SECONDS
        round_index = round_epoch  # used as incremental epoch
        round_id = f"{chat_id}_{round_epoch}"

        # gather bets
        bets_rows = db_query("SELECT user_id, side, amount FROM bets WHERE chat_id=? AND round_id=?", (chat_id, round_id))
        bets = [dict(r) for r in bets_rows]

        # Get group's bet_mode to determine forced/bettai/betxiu/random
        grows = db_query("SELECT bet_mode FROM groups WHERE chat_id=?", (chat_id,))
        bet_mode = grows[0]["bet_mode"] if grows else "random"

        # Decide result (apply forced once semantics, bet b·ªát semantics)
        # If bet_mode == force_tai or force_xiu: apply and revert to random
        forced_applied = False
        forced_value = None
        if bet_mode == "force_tai":
            forced_value = "tai"
            forced_applied = True
            # revert to random after applying
            db_execute("UPDATE groups SET bet_mode='random' WHERE chat_id=?", (chat_id,))
        elif bet_mode == "force_xiu":
            forced_value = "xiu"
            forced_applied = True
            db_execute("UPDATE groups SET bet_mode='random' WHERE chat_id=?", (chat_id,))
        elif bet_mode == "bettai":
            forced_value = "tai"
        elif bet_mode == "betxiu":
            forced_value = "xiu"
        # If forced_value is None, roll normally
        if forced_value:
            # to add unpredictability while honoring admin, we still generate dice that match the forced outcome
            # find a random dice triple that leads to desired result, but keep some randomness
            # Simpler: attempt until we get a dice total in target range
            attempts = 0
            dice, total, special = roll_three_dice()
            while result_from_total(total) != forced_value and attempts < 50:
                dice, total, special = roll_three_dice()
                attempts += 1
            result = result_from_total(total)
        else:
            dice, total, special = roll_three_dice()
            result = result_from_total(total)

        # Persist history
        dice_str = ",".join(map(str, dice))
        db_execute("INSERT INTO history(chat_id, round_index, round_id, result, dice, timestamp) VALUES (?, ?, ?, ?, ?, ?)",
                   (chat_id, round_index, round_id, result, dice_str, now_iso()))

        # Compute winners & losers
        winners = []
        losers = []
        total_winner_bets = 0.0
        total_loser_bets = 0.0

        for b in bets:
            if b["side"] == result:
                winners.append((b["user_id"], b["amount"]))
                total_winner_bets += b["amount"]
            else:
                losers.append((b["user_id"], b["amount"]))
                total_loser_bets += b["amount"]

        # Losers' amounts go to pot
        if total_loser_bets > 0:
            add_to_pot(total_loser_bets)

        # For each winner: credit payout = amount * WIN_MULTIPLIER; house share = amount * HOUSE_RATE -> add to pot
        winners_paid = []
        for uid, amt in winners:
            # house share to pot
            house_share = amt * HOUSE_RATE
            add_to_pot(house_share)
            payout = amt * WIN_MULTIPLIER
            ensure_user(uid, "", "")
            u = get_user(uid)
            new_balance = (u["balance"] or 0.0) + payout
            # update streaks
            cur_streak = (u["current_streak"] or 0) + 1
            best_streak = max(u["best_streak"] or 0, cur_streak)
            db_execute("UPDATE users SET balance=?, current_streak=?, best_streak=? WHERE user_id=?", (new_balance, cur_streak, best_streak, uid))
            winners_paid.append((uid, payout, amt))

        # For losers: reset streak to 0
        for uid, amt in losers:
            rows = db_query("SELECT current_streak FROM users WHERE user_id=?", (uid,))
            if rows:
                db_execute("UPDATE users SET current_streak=0 WHERE user_id=?", (uid,))

        # Special triple handling: 3x1 or 3x6 -> distribute entire pot proportionally to winners in this round
        special_msg = ""
        if special in ("triple1", "triple6"):
            pot_amount = get_pot_amount()
            if pot_amount > 0 and winners:
                total_bets_win = sum([amt for (_, amt) in winners])
                if total_bets_win > 0:
                    distributed = []
                    for uid, amt in winners:
                        share = (amt / total_bets_win) * pot_amount
                        ensure_user(uid, "", "")
                        u = get_user(uid)
                        db_execute("UPDATE users SET balance=? WHERE user_id=?", ((u["balance"] or 0.0) + share, uid))
                        distributed.append((uid, share))
                    special_msg = f"H≈© {pot_amount:,.0f}‚Ç´ ƒë√£ ƒë∆∞·ª£c chia cho ng∆∞·ªùi th·∫Øng theo t·ª∑ l·ªá c∆∞·ª£c!"
                    reset_pot()
            else:
                # if no winners, keep pot as is
                pass

        # Remove bets from DB for this round
        db_execute("DELETE FROM bets WHERE chat_id=? AND round_id=?", (chat_id, round_id))

        # Prepare and send group message: show result and short history
        display = "ƒêEN (T√†i)" if result == "tai" else "TR·∫ÆNG (X·ªâu)"
        msg = f"‚ñ∂Ô∏è Phi√™n {round_index} ‚Äî K·∫øt qu·∫£: {display}\n"
        msg += f"X√∫c x·∫Øc: {dice_str} ‚Äî T·ªïng: {total}\n"
        if special_msg:
            msg += f"\n{special_msg}\n"
        # provide short history (last 10)
        hist_rows = db_query("SELECT result, dice, timestamp FROM history WHERE chat_id=? ORDER BY id DESC LIMIT 10", (chat_id,))
        if hist_rows:
            msg += "\nL·ªãch s·ª≠ (g·∫ßn nh·∫•t):\n"
            for hr in hist_rows:
                r = hr["result"]
                d = hr["dice"]
                rdisp = "ƒêEN" if r == "tai" else "TR·∫ÆNG"
                msg += f"- {rdisp} | {d}\n"

        # Send message to group (do not reveal admin forced actions ‚Äî we only post final)
        try:
            await app.bot.send_message(chat_id=chat_id, text=msg)
        except Exception:
            logger.exception("Cannot send round result to group")

        # Also send short summary to admins (optional)
        if winners_paid:
            admin_summary = f"Round {round_index} in group {chat_id} completed.\nResult: {result}\nWinners:\n"
            for uid, payout, amt in winners_paid:
                admin_summary += f"- {uid}: ƒë·∫∑t {amt:,.0f} -> nh·∫≠n {payout:,.0f}\n"
            try:
                for aid in ADMIN_IDS:
                    await app.bot.send_message(chat_id=aid, text=admin_summary)
            except Exception:
                pass

    except Exception as e:
        logger.exception("Exception in run_round_for_group")
        # notify admins
        for aid in ADMIN_IDS:
            try:
                await app.bot.send_message(chat_id=aid, text=f"ERROR - run_round_for_group exception for group {chat_id}: {e}\n{traceback.format_exc()}")
            except Exception:
                pass

# -----------------------
# STARTUP / SHUTDOWN HANDLERS
# -----------------------

import asyncio
from telegram.ext import Application

async def on_startup(app: Application):
    logger.info("Bot starting up...")
    # ƒê·∫£m b·∫£o DB ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o
    init_db()

    # ‚úÖ Ch·ªù 1 ch√∫t ƒë·ªÉ bot th·ª±c s·ª± v√†o v√≤ng l·∫∑p event
    await asyncio.sleep(1)

    # ‚úÖ T·∫°o task ƒë√∫ng c√°ch sau khi v√≤ng l·∫∑p event ƒë√£ s·∫µn s√†ng
    loop = asyncio.get_running_loop()
    loop.create_task(rounds_loop(app))

    # G·ª≠i th√¥ng b√°o t·ªõi admin khi bot kh·ªüi ƒë·ªông
    for aid in ADMIN_IDS:
        try:
            await app.bot.send_message(chat_id=aid, text="‚úÖ Bot ƒë√£ kh·ªüi ƒë·ªông v√† s·∫µn s√†ng.")
        except Exception:
            pass


async def on_shutdown(app: Application):
    logger.info("Bot shutting down...")
    # G·ª≠i th√¥ng b√°o t·ªõi admin khi bot t·∫Øt
    for aid in ADMIN_IDS:
        try:
            await app.bot.send_message(chat_id=aid, text="‚ö†Ô∏è Bot ƒëang t·∫Øt (shutdown).")
        except Exception:
            pass


# Exception handler cho l·ªói c·∫•p v√≤ng l·∫∑p
def handle_loop_exception(loop, context):
    msg = context.get("exception", context.get("message"))
    logger.error(f"Caught exception in event loop: {msg}")
    # Kh√¥ng g·ª≠i tin nh·∫Øn ·ªü ƒë√¢y v√¨ kh√¥ng c√≥ context c·ªßa bot


# -----------------------
# MAIN: Build Application & Handlers
# -----------------------
import asyncio
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters

def main():
    if not BOT_TOKEN or BOT_TOKEN == "PUT_YOUR_BOT_TOKEN_HERE":
        print("‚ùå ERROR: BOT_TOKEN not set. Please edit bot.py and set BOT_TOKEN.")
        return

    # init db s·ªõm
    init_db()

    # Build application
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # Register handlers - commands
    app.add_handler(CommandHandler("start", start_handler))
    app.add_handler(CommandHandler("game", game_info))
    app.add_handler(CommandHandler("nap", nap_info))
    app.add_handler(CommandHandler("ruttien", ruttien_handler))
    app.add_handler(CallbackQueryHandler(withdraw_callback_handler, pattern=r"^withdraw_.*|^withdraw.*"))

    # Admin commands
    app.add_handler(CommandHandler("addmoney", addmoney_handler))
    app.add_handler(CommandHandler("top10", top10_handler))
    app.add_handler(CommandHandler("balances", balances_handler))
    app.add_handler(CommandHandler("KqTai", admin_force_handler))
    app.add_handler(CommandHandler("KqXiu", admin_force_handler))
    app.add_handler(CommandHandler("bettai", admin_force_handler))
    app.add_handler(CommandHandler("betxiu", admin_force_handler))
    app.add_handler(CommandHandler("tatbet", admin_force_handler))

    # Group control
    app.add_handler(CommandHandler("batdau", batdau_handler))
    app.add_handler(CallbackQueryHandler(approve_callback_handler, pattern=r"^(approve|deny)\|"))

    # Betting messages (pattern /T123 /X500)
    app.add_handler(MessageHandler(filters.Regex(r"^/[TtXx]\d+"), bet_message_handler))

    # Menu text in private
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, menu_text_handler))

    # ‚úÖ Hook startup & shutdown ƒë√∫ng c√∫ ph√°p
    app.post_init = on_startup
    app.post_shutdown = on_shutdown

    # ‚úÖ Exception handler cho loop
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.set_exception_handler(handle_loop_exception)

    # ‚úÖ Run polling
    try:
        logger.info("üöÄ Bot ƒëang ch·∫°y polling...")
        app.run_polling(poll_interval=1.0)
    except Exception as e:
        logger.exception(f"L·ªói khi ch·∫°y bot: {e}")

if __name__ == "__main__":
    main()
